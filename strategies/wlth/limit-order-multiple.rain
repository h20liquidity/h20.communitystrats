# Limit Order Strategy
# 5 buy and sell targets
# Each target you set buy price and amount and sell price and amount
# Target Network: Base
# Quote (Input / Incoming): USDC or WLTH
# Base (Output / Outgoing): WLTH or USDC
# Token contract: https://basescan.org/address/0x99b2B1A2aDB02B38222ADcD057783D7e5D1FCC7D
# Token github: NA
# Liquidity protocol: Uniswap V3
# Liquidity pool address: https://www.dextools.io/app/en/base/pair-explorer/0x1536ee1506e24e5a36be99c73136cd82907a902e?t=1717921711270
# Liquidity pool fee: 0.3%

networks:
  base: 
    rpc: https://mainnet.base.org 
    chain-id: 8453 
    network-id: 8453 
    currency: ETH

subgraphs:
  base: https://api.thegraph.com/subgraphs/name/h20liquidity/base-0x2aee87
  
orderbooks:
  base:
    address: 0x2AeE87D75CD000583DAEC7A28db103B1c0c18b76
    network: base
    subgraph: base

deployers:
  base:
    address: 0xfca89cD12Ba1346b1ac570ed988AB43b812733fe
    network: base

tokens:
  base-wlth:
    network: base
    address: 0x99b2B1A2aDB02B38222ADcD057783D7e5D1FCC7D
  base-usdc:
    network: base
    address: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913

orders:
  # vault-id generated with `openssl rand -hex 32`
  base-wlth-sell:
    orderbook: base
    inputs:
      - token: base-usdc
        vault-id: 
    outputs:
      - token: base-wlth
        vault-id: 
  base-wlth-buy:
    orderbook: base
    inputs:
      - token: base-wlth
        vault-id: 
    outputs:
      - token: base-usdc
        vault-id: 

scenarios:
    limit-orders:
      network: base
      deployer: base
      orderbook: base
      bindings:
        # Ask for now, registry in future.
        uniswap-words: 0xbc609623F5020f6Fc7481024862cD5EE3FFf52D7
        orderbook-subparser: 0x8f037f2a3fF2dee510486D9C63A47A245991a4C1
      scenarios:
        buy:
          bindings:
            # io-ratio and amount for first order. 
            io-ratio-1: 100
            ouptut-amount-1: 1
            # io-ratio and amount for second order. 
            io-ratio-2: 105
            ouptut-amount-2: 1.5
            # io-ratio and amount for third order. 
            io-ratio-3: 110
            ouptut-amount-3: 2
            # io-ratio and amount for third order. 
            io-ratio-4: 115
            ouptut-amount-4: 2.5
            # io-ratio and amount for third order. 
            io-ratio-5: 120
            ouptut-amount-5: 3
          scenarios:
            prod:
              bindings:
                plottables: '''plottables-prod'
                get-trade-count: '''get-trade-count-prod'
            metric:
              runs: 1
              bindings:
                plottables: '''plottables-metric'
                get-trade-count: '''get-trade-count-prod'
            chart:
              runs: 1000
              bindings:
                plottables: '''plottables-chart'
                get-trade-count: '''get-trade-count-chart'
        sell:
          bindings:
            # io-ratio and amount for first order. 
            io-ratio-1: 0.0080
            ouptut-amount-1: 100
            # io-ratio and amount for second order. 
            io-ratio-2: 0.0085
            ouptut-amount-2: 150
            # io-ratio and amount for third order. 
            io-ratio-3: 0.0090
            ouptut-amount-3: 200
            # io-ratio and amount for third order. 
            io-ratio-4: 0.0095
            ouptut-amount-4: 250
            # io-ratio and amount for third order. 
            io-ratio-5: 0.0100
            ouptut-amount-5: 300
          scenarios:
            prod:
              bindings:
                plottables: '''plottables-prod'
                get-trade-count: '''get-trade-count-prod'
            metric:
              runs: 1
              bindings:
                plottables: '''plottables-metric'
                get-trade-count: '''get-trade-count-prod'
            chart:
              runs: 1000
              bindings:
                plottables: '''plottables-chart'
                get-trade-count: '''get-trade-count-chart'
        

charts:
  base-wlth-buy-metrics:
    scenario: limit-orders.buy.metric
    metrics:
      - label: io-ratio-1
        value: 0.3.2
      - label: amount-1
        value: 0.3.3
      - label: io-ratio-2
        value: 0.3.4
      - label: amount-2
        value: 0.3.5
      - label: io-ratio-3
        value: 0.3.6
      - label: amount-3
        value: 0.3.7
      - label: io-ratio-4
        value: 0.3.8
      - label: amount-4
        value: 0.3.9
      - label: io-ratio-5
        value: 0.3.10
      - label: amount-5
        value: 0.3.11

  base-wlth-sell-metrics:
    scenario: limit-orders.sell.metric
    metrics:
      - label: io-ratio-1
        value: 0.3.2
      - label: amount-1
        value: 0.3.3
      - label: io-ratio-2
        value: 0.3.4
      - label: amount-2
        value: 0.3.5
      - label: io-ratio-3
        value: 0.3.6
      - label: amount-3
        value: 0.3.7
      - label: io-ratio-4
        value: 0.3.8
      - label: amount-4
        value: 0.3.9
      - label: io-ratio-5
        value: 0.3.10
      - label: amount-5
        value: 0.3.11
  
  buy-limit-order-simulation:
      scenario: limit-orders.buy.chart
      plots:    
        Limit order io-ratio:     
          x:
              label: 'Order Number'
          y:
              label: 'IO ratio'
          marks:
            - type: line
              options:
                x: 0.0
                y: 0.3.1
        Limit order effective io-ratio (as visible on dex tools):     
          x:
              label: 'Order Number'
          y:
              label: 'Effective io ratio'
          marks:
            - type: line
              options:
                x: 0.0
                y: 0.3.2
        Limit order amount:     
          x:
              label: 'Order Number'
          y:
              label: 'Order amount'
          marks:
            - type: line
              options:
                x: 0.0
                y: 0.3.0

  sell-limit-order-simulation:
      scenario: limit-orders.sell.chart
      plots:    
        Limit order io-ratio:     
          x:
              label: 'Order Number'
          y:
              label: 'IO ratio'
          marks:
            - type: line
              options:
                x: 0.0
                y: 0.3.1
        Limit order effective io-ratio (as visible on dex tools):     
          x:
              label: 'Order Number'
          y:
              label: 'Effective io ratio'
          marks:
            - type: line
              options:
                x: 0.0
                y: 0.3.1
        Limit order amount:     
          x:
              label: 'Order Number'
          y:
              label: 'Order amount'
          marks:
            - type: line
              options:
                x: 0.0
                y: 0.3.0

deployments:
  base-wlth-buy:
    scenario: limit-orders.buy.prod
    order: base-wlth-buy
  base-wlth-sell:
    scenario: limit-orders.sell.prod
    order: base-wlth-sell
---
#uniswap-words !The subparser for the Uniswap words
#orderbook-subparser !The subparser for the Orderbook words

#io-ratio-1 !IO ratio for first order.
#ouptut-amount-1 !Output amount for first order.

#io-ratio-2 !IO ratio for second order.
#ouptut-amount-2 !Output amount for second order.

#io-ratio-3 !IO ratio for third order.
#ouptut-amount-3 !Output amount for third order.

#io-ratio-4 !IO ratio for fourth order.
#ouptut-amount-4 !Output amount for fourth order.

#io-ratio-5 !IO ratio for fifth order.
#ouptut-amount-5 !Output amount for fifth order.

#count-key "count-key"
#plottables !Binding to plot values.
#get-trade-count !Binding to get trade count.
#test-trade-count !Test trade count for plotting.

#plottables-prod
  _ _: ;

#plottables-chart
  amount io-ratio: ,
  effective-io-ratio: inv(io-ratio);

#plottables-metric
  amount io-ratio: ,
  _: io-ratio-1,
  _: ouptut-amount-1,
  _: io-ratio-2,
  _: ouptut-amount-2,
  _: io-ratio-3,
  _: ouptut-amount-3,
  _: io-ratio-4,
  _: ouptut-amount-4,
  _: io-ratio-5,
  _: ouptut-amount-5;

#get-trade-count-prod
  trade-count-key: hash(order-hash() count-key), 
  trade-count: get(trade-count-key);

#get-trade-count-chart
  trade-count: floor(mod(test-trade-count 5));

#get-ratio-amount
  trade-count: call<'get-trade-count>(),
  ouput-amount: conditions(
    equal-to(trade-count 0) ouptut-amount-1
    equal-to(trade-count 1) ouptut-amount-2
    equal-to(trade-count 2) ouptut-amount-3
    equal-to(trade-count 3) ouptut-amount-4
    equal-to(trade-count 4) ouptut-amount-5
    "Max order count"    
  ),
  io-ratio: conditions(
    equal-to(trade-count 0) io-ratio-1
    equal-to(trade-count 1) io-ratio-2
    equal-to(trade-count 2) io-ratio-3
    equal-to(trade-count 3) io-ratio-4
    equal-to(trade-count 4) io-ratio-5
    "Max order count"    
  );

#calculate-io
  using-words-from uniswap-words orderbook-subparser
    
  trade-count
  final-amount
  final-ratio: call<'get-ratio-amount>(),
  :call<'plottables>(final-amount final-ratio); 

#handle-io
  trade-count-key: hash(order-hash() count-key), 
  trade-count: get(trade-count-key), 
  :set(trade-count-key add(trade-count 1));
