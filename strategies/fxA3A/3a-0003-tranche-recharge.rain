# Strat: Recharging tranches
#
# High level idea is that the strategy offers a firm price for batches of tokens.
# Each batch is called a "tranche".
#
# Target Network: Polygon
# Quote (Input): USDC
# Base (Output): FXA3A
# Token contract: 0x58c7b2828e7f2b2caa0cc7feef242fa3196d03df
# Token github: NA
# Liquidity protocol: Quickswap V3
# Liquidity pool address: https://www.dextools.io/app/en/polygon/pair-explorer/0xdcf937e79c4f730111143b2345c6028c5051f304?t=1719266575032
# Liquidity pool fee: tbc
# Stable used https://polygonscan.com/token/0x2791bca1f2de4661ed88a30c99a7a9449aa84174?a=0xdcf937e79c4f730111143b2345c6028c5051f304
# Stable used 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174

networks:
  polygon-h20liquidity: 
    rpc: https://polygon-mainnet.g.alchemy.com/v2/y3BXawVv5uuP_g8BaDlKbKoTBGHo9zD9
    chain-id: 137 
    network-id: 137 
    currency: MATIC

subgraphs:
  polygon-h20liquidity: https://api.thegraph.com/subgraphs/name/h20liquidity/polygon-0xc95a5f8e
  
orderbooks:
  polygon-h20liquidity:
    address: 0xc95A5f8eFe14d7a20BD2E5BAFEC4E71f8Ce0B9A6
    network: polygon-h20liquidity
    subgraph: polygon-h20liquidity

deployers:
  polygon-h20liquidity:
    address: 0xB3aC858bEAf7814892d3946A8C109A7D701DF8E7
    network: polygon-h20liquidity

tokens:
  tkn-fxa3a:
    network: polygon-h20liquidity
    address: 0x58c7b2828e7f2b2caa0cc7feef242fa3196d03df
  tkn-usdc:
    network: polygon-h20liquidity
    address: 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174

orders:
  # vault-id generated with `openssl rand -hex 32`
  polygon-a3a-buy:
    orderbook: polygon-h20liquidity
    inputs:
      - token: tkn-usdc
        vault-id: 0x01ba2d3e0206a4fb13bd63c8120c08dd992a54af1099f4daffd9a5450918eceb
    outputs:
      - token: tkn-fxa3a
        vault-id: 0x01ba2d3e0206a4fb13bd63c8120c08dd992a54af1099f4daffd9a5450918eceb

scenarios:
    polygon-a3a-tranches:
        network: polygon-h20liquidity
        deployer: polygon-h20liquidity
        orderbook: polygon-h20liquidity
        bindings:
          # The uniswap words are only requiA3A  if there is a conversion between
          # the input/output token and some external price. Typically this is
          # not the case as the io-ratio is defined in terms of the input/output
          # token and the io-ratio-multiplier is set to the identity function.
          uniswap-words: 0x2382e861cF4F47578aC29B50944b3b445577aF74

          orderbook-subparser: 0x8f037f2a3fF2dee510486D9C63A47A245991a4C1

          # How far we move through tranche space in a second.
          # 1e18 is a whole tranche, so we divide 1 by the number of seconds
          # per recharge to calculate the per-second rate.
          # Examples:
          # 172800 seconds in 2 days, 48 hours = 1 / 172800 = 0.000005787037037037
          # 86400 seconds in 1 day, 24 hours = 1 / 86400 = 0.000011574074074074
          # 43200 seconds in 12 hours, 12 hours = 1 / 43200 = 0.000023148148148148
          # 3600 seconds in 1 hour, 1 hour = 1 / 3600 = 0.000277777777777777
          tranche-space-per-second: 0.000011574074074074

          # After any trade happens we pause before recharging.
          # Delay is to observe market feedback to the previous trade, e.g. to
          # potentially offer the next tranche at a different price for some time
          # before recharging back to the previous price.
          # Too long and people could grief to stop recharging.
          # Too quick and it will be difficult to move between tranches.
          # The default here is 5 minutes (units are seconds) and probably never
          # needs to be changed.
          tranche-space-recharge-delay: 300

          # When a tranche is completely cleaA3A , the next tranche MAY be jumped
          # into partially. For example, if tranches are 90% shy (i.e. 0.9) then
          # if a tranche is cleaA3A  completely then the next tranche will be
          # started at 10% of its maximum size. This means that the capital
          # requirements for the strategy to reprice itself as the market moves
          # are A3A uced.
          # This MUST be set to a value less than 1e18, else it will entirely
          # skip tranches.
          # Shyness MAY be set to 0, in which case every tranche will be fully
          # available as it is enteA3A .
          # tranche-space-shyness: 0

          # Minimum trade size, if you put in a trade for less than x% of a
          # tranche it wont clear.
          # Mitigates people pinging strat for dust orders to stop recharging.
          min-tranche-space-diff: 0.1

          # Snap to the nearest tranche to avoid dust issues at the edges, either
          # due to rounding in the evm or potentially malicious trades.
          # 0.01 is 1%
          tranche-space-snap-threshold: 0.01

          # This is only relevant if the tranche size/ratio is denominated in
          # some token other than the input/output tokens. For example, if the
          # TKN was being traded for WETH but the tranche size was denominated in
          # USD then the reference-stable would be USD and the reference-reserve
          # would be WETH, and the identity multiplier needs to be swapped out
          # for e.g. a TWAP USDT based multiplier.
          # Typically this is NOT needed as the tranche size and ratio ARE
          # denominated in the input/output tokens.
          io-ratio-multiplier: '''io-ratio-multiplier-identity'

        scenarios:
          buy:
            bindings:
                # If we want to denominate the amount in USD when we're
                # buying A3A  with it, then the amount is the OUTPUT.
                amount-is-output: 1
                io-ratio-expr: '''linear-growth'
                io-ratio-base: 333.333333333333333333
                io-ratio-growth: 30
                tranche-size-expr: '''exponential-growth'
                tranche-size-base: 10
                tranche-size-growth: 0.1
            scenarios:
              initialized:
                bindings:
                  # This needs to be set upon going live.
                  # Generate a chart and compare to current market prices, if
                  # the market is within the chart then set this to the closest
                  # tranche that won't immediately dump into the market.
                  # If the market is outside the chart then set this to 0.
                  initial-tranche-space: 0
                scenarios:
                  prod:
                    bindings:
                      get-last-tranche: '''get-last-tranche-prod'
                      set-last-tranche: '''set-last-tranche-prod'
                      plottables: '''plottables-prod'
                      tranche-space-shyness: 0
                  test:
                    runs: 100
                    bindings:
                      get-last-tranche: '''get-last-tranche-test-init'
                      set-last-tranche: '''set-last-tranche-test'
                      plottables: '''plottables-test'
                      test-last-update-time: 0
                      test-now: 0
                  test-shy-tranche:
                    bindings:
                      get-last-tranche: '''get-last-tranche-prod'
                      set-last-tranche: '''set-last-tranche-prod'
                      plottables: '''plottables-prod'
                      tranche-space-shyness: 0.9
              test:
                  runs: 10000
                  bindings:
                    get-last-tranche: '''get-last-tranche-test'
                    set-last-tranche: '''set-last-tranche-test'
                    plottables: '''plottables-test'
                    max-test-tranche-space: 20
                    test-last-update-time: 0
                    test-now: 0


charts:
    buy-initial-deployment:
      scenario: polygon-a3a-tranches.buy.initialized.test
      metrics:
        - label: Initial USD sold
          value: 0.6
          description: 'Amount of USD sold to buy A3A  in the first tranche (stack item 0.6)'             
        - label: Initial A3A  bought
          value: 0.5.2
          description: 'Amount of A3A  purchased in the first tranche (stack item 0.5.2)'                             
        - label: Initial io-ratio
          value: 0.7
          description: '# A3A  purchased per USD spent (stack item 0.7)'        
        - label: Starting tranche
          value: 0.2.0
          description: 'This strategy starts executing buys at the initial tranche (stack item 0.2.0)'          
        - label: Initial buy price
          value: 0.5.3
          precision: 4
          unit-suffix: " BLUE"             
          description: 'Price you pay for 1 A3A  in BLUE, visible on dextools (stack item 0.5.3)'     
      plots:

    buy-simulation:
      scenario: polygon-a3a-tranches.buy.test
      plots:    
        USDT sold per tranche:     
          x:
              label: 'Tranche space'
          y:
              label: 'USDT spent'
          marks:
            - type: line
              options:
                x: 0.0
                y: 0.6  
        A3A  bought per tranche:    
          x:
              label: 'Tranche space'
          y:
              label: 'A3A  bought'          
          marks:
            - type: line
              options:
                x: 0.0
                y: 0.5.2
        'io-ratio per tranche':
          subtitle: 'Ratio of A3A  bought per 1 USDT sold per tranche'        
          x:
              label: 'Tranche space'
          y:
              label: 'A3A  bought per 1 USDT'            
          marks:
            - type: line
              options:
                x: 0.0
                y: 0.7
        buy price by tranche:
          subtitle: 'Price paid for 1 A3A  in USDT, visible on dextools as A3A /USDT pair'        
          x:
              label: 'Tranche space'
          y:
              label: '1 A3A  priced in USDT'          
          marks:
            - type: line
              options:
                x: 0.0
                y: 0.5.3      


deployments:
  polygon-a3a-buy:
    scenario: polygon-a3a-tranches.buy.initialized.prod
    order: polygon-a3a-buy

---
#tranche-space-per-second !The amount of tranche space that is recharged per second.
#tranche-space-recharge-delay !The duration in seconds that no recharging occurs after a trade occurs.

#tranche-size-expr !The binding to get the tranche size for the current tranche space.
#tranche-size-base !Base tranche size is the size of the smallest tranche, denominated in output token.
#tranche-size-growth !The exponential growth factor of the size of each tranche. E.g. 0.01 is 1% output amount growth per tranche.

#io-ratio-expr !The binding to get the IO ratio for the current tranche space.
#io-ratio-base !The base IO ratio, as a decimal 18 fixed point number. This is the IO ratio at tranche space 0 and grows according to the growth factor per tranche.
#io-ratio-growth !The exponential growth factor of the IO ratio. E.g. 0.01 is 1% io-ratio growth per tranche.

#reference-stable !The stable token that is used as a reference for the TWAP to offer dollar equivalent conversions.
#reference-stable-decimals !The number of decimals of the reference stable token.
#reference-reserve !The token that will be used to compare against the reference stable token to calculate the TWAP for dollar equivalent conversions.
#reference-reserve-decimals !The number of decimals of the reserve token.
#twap-duration !The duration in seconds of the TWAP window for dollar equivalence conversions.
#twap-fee !The uniswap fee tier to use for the TWAP.

#min-tranche-space-diff !The minimum tranche space difference that is allowed per trade. Prevents dusting the strat to stop it recharging.
#tranche-space-snap-threshold !The threshold in tranche space to snap to the nearest tranche to avoid dust issues at the edges.

#initial-tranche-space !The initial tranche space when the order is first deployed.
#get-last-tranche !The binding to get the last tranche space and update time.
#set-last-tranche !The binding to set the last tranche space and update time.

#test-tranche-space-before !Returned by get-test-last-tranche to allow the tranche space before to be bound for testing.
#test-last-update-time !Returned by get-test-last-tranche to allow the last update time to be bound for testing.
#test-now !Returned by get-test-last-tranche to allow the current time to be bound for testing.

#io-ratio-multiplier !The binding to get the IO ratio multiplier.

#amount-is-output !Whether the amount is an output or input amount. Non-zero means output (i.e. normal orderbook behaviour), zero means input.

#init-key "init"
#tranche-space-key "tranche-space"
#update-time-key "update-time"

#plottables !The binding for additional things we want to plot during testing.

#uniswap-words !The subparser for the Uniswap words
#orderbook-subparser !The subparser for the Orderbook

#plottables-test
  amount
  io-ratio:,
  input-amount: mul(amount io-ratio),
  effective-price: inv(io-ratio);

#plottables-prod
  amount
  io-ratio:;

#get-last-tranche-prod
  is-initialized: get(hash(order-hash() init-key)),
  tranche-space-before: if(
    is-initialized
    get(hash(order-hash() tranche-space-key))
    initial-tranche-space
  ),
  last-update-time: if(
    is-initialized
    get(hash(order-hash() update-time-key))
    now()
  ),
  current-time: now();

#tranche-space-shyness !The shyness of the liquidity in tranches. E.g. 0.9 is 90% shy.
#set-last-tranche-prod
  tranche-space current-time:,
  shy-tranche-space: if(
    is-zero(frac(tranche-space))
    add(tranche-space tranche-space-shyness)
    tranche-space),
  :set(hash(order-hash() init-key) 1),
  :set(hash(order-hash() tranche-space-key) shy-tranche-space),
  :set(hash(order-hash() update-time-key) current-time);

/* Forward the bindings through as is to the caller. */
#max-test-tranche-space !The maximum tranche space that will appear on the test chart.
#get-last-tranche-test
  tranche-space-before: mod(test-tranche-space-before max-test-tranche-space),
  last-update-time: test-last-update-time,
  current-time: test-now;
#get-last-tranche-test-init
  tranche-space-before: initial-tranche-space,
  last-update-time: test-last-update-time,
  current-time: test-now;
/* There's nothing to set if we're just rebinding in tests. */
#set-last-tranche-test
  tranche-space current-time:;

#exponential-growth
  base rate t:,
  _: exponential-growth(base rate t);

#linear-growth
  base rate t:,
  _: linear-growth(base rate t);

#constant-growth
  base _ _:,
  _: base;

#calculate-tranche
  tranche-space-before
  last-update-time
  current-time: call<'get-last-tranche>(),
  recharge-duration: saturating-sub(current-time add(last-update-time tranche-space-recharge-delay)),
  recharged-tranche-space: mul(recharge-duration tranche-space-per-second),
  /* repeat current-time for easy access by callers */
  _: current-time,
  tranche-space-now: saturating-sub(tranche-space-before recharged-tranche-space),
  tranche-space-available: headroom(tranche-space-now),
  tranche-total-size: call<'tranche-size-expr>(tranche-size-base tranche-size-growth floor(tranche-space-now));

#io-ratio-multiplier-sell
  multiplier: uniswap-v3-twap-output-ratio(reference-stable reference-stable-decimals reference-reserve reference-reserve-decimals twap-duration 0 twap-fee);

#io-ratio-multiplier-buy
  multiplier: uniswap-v3-twap-output-ratio(reference-reserve reference-reserve-decimals reference-stable reference-stable-decimals twap-duration 0 twap-fee);

#io-ratio-multiplier-identity
  multiplier: 1;

#calculate-io
  using-words-from uniswap-words orderbook-subparser
  tranche-space-now
  tranche-space-available
  tranche-total-size: call<'calculate-tranche>(),
  tranche-io-ratio: call<'io-ratio-expr>(io-ratio-base io-ratio-growth floor(tranche-space-now)),
  final-io-ratio: mul(tranche-io-ratio call<'io-ratio-multiplier>()),
  amount-available: mul(tranche-total-size tranche-space-available),
  amount: if(amount-is-output amount-available div(amount-available final-io-ratio)),
  io-ratio: final-io-ratio,
  :call<'plottables>(amount io-ratio);

#handle-io
  current-time
  tranche-space-before
  _
  tranche-total-size: call<'calculate-tranche>(),
  tranche-amount-diff: if(
    amount-is-output
    scale-18-dynamic(output-token-decimals() uint256-output-vault-decrease())
    scale-18-dynamic(input-token-decimals() uint256-input-vault-increase())),
  tranche-space-diff: div(tranche-amount-diff tranche-total-size),
  tranche-space-after: add(tranche-space-before tranche-space-diff),
  /* Snap tranche space to the nearest tranche to avoid dust issues at the edges */
  tranche-space-after-snapped: snap-to-unit(tranche-space-snap-threshold tranche-space-after),
  :ensure(
    greater-than-or-equal-to(tranche-space-after-snapped add(tranche-space-before min-tranche-space-diff))
    "Minimum trade size not met."
  ),
  :call<'set-last-tranche>(tranche-space-after-snapped current-time);
