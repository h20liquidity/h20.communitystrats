# Strategy: Oracle based DCA
#
# High level, this strategy buys USDC denominated ZERC tokens at the end of every cooldown period
# provided that current calculated USDC denominated price of ZERC falls within the price gird.
#
# - Amount of ZERC bought per trade within the price band is randomized and centered around a mean,
#   value for which can be set within the bindings.
# - Range for the grid can also be provided within the bindings.
# - Strategy provides a guard against orcale manipulation by enforcing that the ratio of the current price offered
#   by the order to the 30 min average price is within the threshold, which can be provided as a binding in the strategy.
# - Strategy implements a bounty auction for gas management 
# 
# Target Network: POLYGON
# Quote (Input): USDC
# Base (Output): ZERC
# Token contract: 0xE1b3eb06806601828976e491914e3De18B5d6b28
# Token github: NA
# Liquidity protocol: Uniswap V2
# Liquidity pool address: https://www.dextools.io/app/en/polygon/pair-explorer/0x514480cf3ed104b5c34a17a15859a190e38e97af?t=1721741742208
# Liquidity pool fee: tbc
# Stable used https://polygonscan.com/address/0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359
# Stable used 0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359

networks:
  polygon-h20liquidity: 
    rpc: https://polygon-mainnet.g.alchemy.com/v2/y3BXawVv5uuP_g8BaDlKbKoTBGHo9zD9
    chain-id: 137 
    network-id: 137 
    currency: MATIC

subgraphs:
  polygon-h20liquidity: https://api.thegraph.com/subgraphs/name/h20liquidity/polygon-0xc95a5f8e
  
orderbooks:
  polygon-h20liquidity:
    address: 0x2f209e5b67A33B8fE96E28f24628dF6Da301c8eB
    network: polygon-h20liquidity
    subgraph: polygon-h20liquidity

deployers:
  polygon-h20liquidity:
    address: 0xF14E09601A47552De6aBd3A0B165607FaFd2B5Ba
    network: polygon-h20liquidity

tokens:
  polygon-usdc:
    network: polygon-h20liquidity
    address: 0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359
  polygon-zerc:
    network: polygon-h20liquidity
    address: 0xE1b3eb06806601828976e491914e3De18B5d6b28

orders:
  # vault-id generated with `openssl rand -hex 32`
  polygon-h20liquidity-buy:
    orderbook: polygon-h20liquidity
    inputs:
      - token: polygon-zerc
        vault-id: 0xd302fedcbf6b3ea84812cde736439a97478b93fce4b546bc445f837f25589384
    outputs:
      - token: polygon-usdc
        vault-id: 0xd302fedcbf6b3ea84812cde736439a97478b93fce4b546bc445f837f25589384


scenarios:
    polygon-h20liquidity-oracle-dca:
        network: polygon-h20liquidity
        deployer: polygon-h20liquidity
        orderbook: polygon-h20liquidity
        bindings:
          # Ask for now, registry in future.
          uniswap-words: 0xbc609623F5020f6Fc7481024862cD5EE3FFf52D7
          orderbook-subparser: 0x8f037f2a3fF2dee510486D9C63A47A245991a4C1

          # Uniswap V3 factory addresses and init code
          uniswap-v2-factory: 0x5757371414417b8C6CAad45bAeF941aBc7d3Ab32
          uniswap-v2-init-code: 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f

          # Distribution token, i.e token that is bought or sold, for and against the stable token.
          distribution-token: 0xE1b3eb06806601828976e491914e3De18B5d6b28
          # Stable token, token with price pegged to one dollar.
          stable-token: 0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359 

          # If the distribution token is paired with a stable token in a univ2 pool,
          # then address for this binding is same as the stable token address.
          # Eg: If the uniswap-v2 pair is ZERC-USDC, then reserve token address is same as USDC address.
          #
          # If the distribution token is paired with native wrapped token in a univ2 pool,
          # then address for this binding is the address of the native wrapped token.
          # Eg: If the uniswap-v2 pair is ZERC-WETH, then reserve token address is same as WETH address.
          # This reserve token will be compared against stable token to calculate the dollar
          # equivalent amount.
          reserve-token: 0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359

          # IO multiplier binding
          # Binding used to calculate multiplier for distribution token to get its dollor equivalent.
          #
          # If distribution token is paired with a stable token, the binding value is the stable multiplier.
          # io-multiplier: '''io-multiplier-stable'
          #
          # If distribution token is paired with a reserve token, the binding value is the reserve multiplier
          # io-multiplier: '''io-multiplier-reserve'
          io-multiplier: '''io-multiplier-stable'
          
          #Jittery binomial bits
          jittery-binomial-bits: 10

          # Bounty amount offered for trade in dollar.
          #
          # Minimum amount of bounty offered for the trade, depending upon the network this value might change.
          bounty-min: 0.3

          # Maximum amount of bounty offered for the trade, this will also be the amount offered for the first trade.
          bounty-max: 1.5 

          # Bounty unit increase, amount by which to increase the bounty amount.
          bounty-unit-increase: 0.01

          # Bounty unit time in seconds, time in which bounty increased by `bounty-unit-increase`
          # Eg: If `bounty-unit-increase` is 0.01 and `bounty-unit-time` is 60, then the bounty will increase linearly
          # by `0.01` every 60 seconds.
          bounty-unit-time: 60

        scenarios:
          buy:
            bindings:
              # Cooldown between two trades in seconds.
              cooldown-time: 60
              # Mean amount of USDC offered per trade.
              # For gas expensive networks mean amount needs to be higher to compensate
              # for gas fee and bounty.
              mean-usd-amount: 15 
              calculate-exact-quote: '''calculate-exact-buy-quote'
              calculate-io-ratio: '''calculate-io-ratio-buy'
            scenarios:
              prod:
                bindings:
                  ensure-cooldown: '''ensure-cooldown-prod'
                  plottables: '''plottables-prod'
              chart:
                runs: 1000
                bindings:
                  ensure-cooldown: '''ensure-cooldown-chart'
                  plottables: '''plottables-chart'
              metric:
                runs: 1
                bindings:
                  ensure-cooldown: '''ensure-cooldown-metric'
                  plottables: '''plottables-chart'
              test:
                runs: 1
                bindings:
                  ensure-cooldown: '''ensure-cooldown-metric'
                  plottables: '''plottables-prod'
          sell:
            bindings:
              # Cooldown between two trades in seconds.
              cooldown-time: 60
              # Mean amount of USDC offered per trade.
              # For gas expensive networks mean amount needs to be higher to compensate
              # for gas fee and bounty.
              mean-usd-amount: 15 
              calculate-exact-quote: '''calculate-exact-sell-quote'
              calculate-io-ratio: '''calculate-io-ratio-sell'
            scenarios:
              prod:
                bindings:
                  ensure-cooldown: '''ensure-cooldown-prod'
                  plottables: '''plottables-prod'
              chart:
                runs: 1000
                bindings:
                  ensure-cooldown: '''ensure-cooldown-chart'
                  plottables: '''plottables-chart'
              metric:
                runs: 1
                bindings:
                  ensure-cooldown: '''ensure-cooldown-metric'
                  plottables: '''plottables-chart'
              test:
                runs: 1
                bindings:
                  ensure-cooldown: '''ensure-cooldown-metric'
                  plottables: '''plottables-prod'
                        
charts:
  B. ZERC Buy Deployment Planning: 
    scenario: polygon-h20liquidity-oracle-dca.buy.metric
    metrics:
      
      - label: Amount of USDC offered for first trade.
        value: 0.4
        description: Amount of USDC offered for the current block.
      - label: Amount of ZERC received for frist trade.
        value: 0.5
        description: Amount of ZERC received for USDC offered.
      - label: io-ratio ZERC/USDC
        value: 0.7
        description: Ratio offered by the order for the current block accounting for bounty.
      - label: Minimum Bounty amount
        value: 0.7.4
        unit-prefix: $        
        description: Minimum bounty offered
      - label: Maximum Bounty amount
        value: 0.7.5
        unit-prefix: $        
        description: Maximum bounty offered
      - label: Bounty increase per minute
        value: 0.7.7
        unit-prefix: $   
        description: Amount by which bounty increases every minute after cooldown.
      - label: Max Bounty ratio
        value: 0.7.6
        unit-suffix: '%'   
        description: Ratio of max bounty amount to order amount
      - label: Mean amount
        value: 0.7.3
        unit-prefix: $        
        description: Mean amount of USDC sold 
      - label: Cooldown in minutes
        value: 0.7.8        
        description: Number of minutes between strategy running
      - label: Trades per hour
        value: 0.7.9       
        description: Number of trades per hour
      - label: Cummulative amount traded daily
        value: 0.7.10     
        unit-prefix: $ 
        description: Cummulative dollar equivalent amount of ZERC tokens sold in a day.
      - label: Cummulative amount traded weekly
        value: 0.7.11     
        unit-prefix: $ 
        description: Cummulative dollar equivalent amount of ZERC tokens sold in a week.
      - label: Cummulative amount traded montly
        value: 0.7.12     
        unit-prefix: $ 
        description: Cummulative dollar equivalent amount of ZERC tokens sold in a month.  

    D. ZERC Sell Deployment Planning: 
    scenario: polygon-h20liquidity-oracle-dca.sell.metric
    metrics:
      - label: Amount of USDC offered for first trade.
        value: 0.4
        description: Amount of USDC offered for the current block.
      - label: Amount of ZERC received for frist trade.
        value: 0.5
        description: Amount of ZERC received for USDC offered.
      - label: io-ratio USDC/ZERC
        value: 0.7
        description: Ratio offered by the order for the current block accounting for bounty.
      - label: Minimum Bounty amount
        value: 0.7.4
        unit-prefix: $        
        description: Minimum bounty offered
      - label: Maximum Bounty amount
        value: 0.7.5
        unit-prefix: $        
        description: Maximum bounty offered
      - label: Bounty increase per minute
        value: 0.7.7
        unit-prefix: $   
        description: Amount by which bounty increases every minute after cooldown.
      - label: Max Bounty ratio
        value: 0.7.6
        unit-suffix: '%'   
        description: Ratio of max bounty amount to order amount
      - label: Mean amount
        value: 0.7.3
        unit-prefix: $        
        description: Mean amount of USDC sold 
      - label: Cooldown in minutes
        value: 0.7.8        
        description: Number of minutes between strategy running
      - label: Trades per hour
        value: 0.7.9       
        description: Number of trades per hour
      - label: Cummulative amount traded daily
        value: 0.7.10     
        unit-prefix: $ 
        description: Cummulative dollar equivalent amount of ZERC tokens sold in a day.
      - label: Cummulative amount traded weekly
        value: 0.7.11     
        unit-prefix: $ 
        description: Cummulative dollar equivalent amount of ZERC tokens sold in a week.
      - label: Cummulative amount traded montly
        value: 0.7.12     
        unit-prefix: $ 
        description: Cummulative dollar equivalent amount of ZERC tokens sold in a month.    

    plots:

  A. ZERC Trading Simulation:
    scenario: polygon-h20liquidity-oracle-dca.buy.chart
    plots:
      Mean amount of USDC offered:
        marks:
          - type: recty
            options:
              transform:
                type: binx
                content:
                  outputs:
                    y: "count"
                  options:
                    x: "0.4"
                    thresholds: 25
                    
      Mean amount of ZERC received:
        marks:
          - type: recty
            options:
              transform:
                type: binx
                content:
                  outputs:
                    y: "count"
                  options: 
                    x: "0.5"
                    thresholds: 25
  C. ZERC Sell Simulation:
    scenario: polygon-h20liquidity-oracle-dca.sell.chart
    plots:
      Mean amount of USDC received:
        marks:
          - type: recty
            options:
              transform:
                type: binx
                content:
                  outputs:
                    y: "count"
                  options:
                    x: "0.4"
                    thresholds: 25
                    
      Mean amount of ZERC offered:
        marks:
          - type: recty
            options:
              transform:
                type: binx
                content:
                  outputs:
                    y: "count"
                  options: 
                    x: "0.5"
                    thresholds: 25 

deployments:
  polygon-h20liquidity-buy:
    scenario: polygon-h20liquidity-oracle-dca.buy.prod
    order: polygon-h20liquidity-buy
---
#cooldown-time !The minimum amount of seconds that must elapse between trades.
#bounty-min !Minimum bounty to offer for each trade in USD.
#bounty-unit-increase !Amount to increase bounty per unit time.
#bounty-unit-time !Unit of time to increase the bounty.
#bounty-max !Maximum bounty that can be offered. 

#distribution-token !The distribution token, the token that is bought and sold against the stable token.
#stable-token !The stable token that is used as a reference for the dollar equivalent conversions.
#reserve-token !The token that will be used to compare against the stable token to calculate the dollar equivalent amount.

#mean-usd-amount !Mean dollar denominated amount of stable tokens traded.
#jittery-binomial-bits !Number of bits for jittery binomial to calculate random amount of stable token traded per trade.

#test-current-time !Test current time for plotting.
#test-last-time !Test last time for plotting.

#ensure-cooldown !Binding to enforce cooldown check.
#calculate-exact-quote !Binding to calculate exact amount of distribution tokens required for buys and sells.
#calculate-io-ratio !Binding to calculate io-ratio for the order.
#io-multiplier !Binding to get the ratio multiplier for distribution token.
#plottables !The binding for additional things we want to plot during testing.

#uniswap-words !The subparser for the Uniswap words
#uniswap-v2-factory !Uniswap v3 factory address.
#uniswap-v2-init-code !Uniswap v3 init code hash.
#orderbook-subparser !The subparser for the Orderbook words
#cooldown-key "cooldown-key"

#jittery-binomial
  seed:,
  binomial18-10:
    bitwise-count-ones(bitwise-decode<0 jittery-binomial-bits>(hash(seed))),
  noise18-1:
    mod(hash(seed 0) 1),
  jittery-combined:
    add(binomial18-10 noise18-1),
  jittery-combined-normalized:
    div(jittery-combined add(1 jittery-binomial-bits));

#bounty-auction
  time-since-cooldown: ,
  bounty: min(
    linear-growth(
      bounty-min
      div(bounty-unit-increase bounty-unit-time)
      time-since-cooldown
    )
    bounty-max
  );

#ensure-cooldown-metric
 _ _: now() 0;

#ensure-cooldown-chart
 _ _: test-current-time test-last-time;
 
#ensure-cooldown-prod
 current-time: now(),
 last-time: get(hash(order-hash() cooldown-key)),
 :ensure(
   greater-than-or-equal-to(
     current-time
     add(last-time cooldown-time)
   )
   "cooldown"
 ),
 :set(hash(order-hash() cooldown-key) current-time);


#calculate-io-ratio-buy
  usd-amount18
  token-amount18
  time-since-cooldown: ,
  io-ratio: div(token-amount18 add(usd-amount18 call<'bounty-auction>(time-since-cooldown))),
  /* Add io-ratio and max-op on stack*/
  _: usd-amount18,
  _: io-ratio;

#calculate-io-ratio-sell
  usd-amount18
  token-amount18
  time-since-cooldown: ,
  io-ratio: div(saturating-sub(usd-amount18 call<'bounty-auction>(time-since-cooldown)) token-amount18),
  /* Add io-ratio and max-op on stack*/
  _: token-amount18,
  _: io-ratio;

#calculate-exact-buy-quote
  amount-usd18 ratio-multiplier: ,
  token-amount18 last-price-timestamp: uniswap-v2-quote-exact-input<1>(
    reserve-token distribution-token
    mul(amount-usd18 ratio-multiplier)
    uniswap-v2-factory uniswap-v2-init-code
  ),
  :ensure(less-than(last-price-timestamp now()) "Buy price change."),
  _: token-amount18;


#calculate-exact-sell-quote
  amount-usd18 ratio-multiplier: ,
  token-amount18 last-price-timestamp: uniswap-v2-quote-exact-output<1>(
    distribution-token reserve-token
    mul(amount-usd18 ratio-multiplier)
    uniswap-v2-factory uniswap-v2-init-code
  ),
  :ensure(less-than(last-price-timestamp now()) "Sell price change."),
  _: token-amount18;

#io-multiplier-reserve
  _: uniswap-v2-current-output-ratio(
    stable-token reserve-token
    uniswap-v2-factory uniswap-v2-init-code
  );

#io-multiplier-stable
  _: 1;

#plottables-chart
  max-output-amount io-ratio: ,
  _: cooldown-time,
  _: mean-usd-amount,
  _: bounty-min,
  _: bounty-max,
  max-bounty-ratio: mul(div(bounty-max mean-usd-amount) 100),
  bounty-increase-per-minute: mul(div(bounty-unit-increase bounty-unit-time) 60),
  cooldown-in-minutes: div(cooldown-time 60),
  cooldown-in-hours: div(60 cooldown-in-minutes),
  total-amount-daily: mul(cooldown-in-hours mean-usd-amount 24),
  total-amount-weekly: mul(total-amount-daily 7),
  total-amount-montly: mul(total-amount-daily 30);


#plottables-prod
  _ _: ;

#calculate-io
  using-words-from uniswap-words orderbook-subparser

  io-ratio-multiplier: call<'io-multiplier>(),
  current-time last-time: call<'ensure-cooldown>(),
  random-multiplier18: call<'jittery-binomial>(last-time), 
  jittered-amount-usd18: mul(
    mul(mean-usd-amount 2)
    random-multiplier18
  ), 
  token-amount-output18: call<'calculate-exact-quote>(jittered-amount-usd18 io-ratio-multiplier),
  max-output final-io-ratio: call<'calculate-io-ratio>(
    jittered-amount-usd18
    token-amount-output18
    saturating-sub(current-time add(last-time cooldown-time))
  ),
  :call<'plottables>(max-output final-io-ratio); 

#handle-io
:ensure(
    greater-than-or-equal-to(
      uint256-output-vault-decrease()
      scale-n-dynamic(output-token-decimals() calculated-max-output())
    )
    "Partial trade"
  );