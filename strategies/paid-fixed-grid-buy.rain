# Strategy: Fixed Grid
#
# High level, this strategy buys mean amount of PAID tokens at the end of every cooldown period
# provided that current price feteched from the PAID/USDC uni-v3 pool falls in a particular range.
#
# - Amount of PAID bought per trade within the price band is randomized and centered around a mean,
#   value for which can be set within the bindings.
# - Range for the grid can also be provided within the bindings
# - Strategy provides a guard against 

networks:
  base-paid: 
    rpc: https://mainnet.base.org 
    chain-id: 8453 
    network-id: 8453 
    currency: ETH

subgraphs:
  base-paid: https://api.thegraph.com/subgraphs/name/h20liquidity/base-0x2aee87
  
orderbooks:
  base-paid:
    address: 0x2AeE87D75CD000583DAEC7A28db103B1c0c18b76
    network: base-paid
    subgraph: base-paid

deployers:
  base-paid:
    address: 0xfca89cD12Ba1346b1ac570ed988AB43b812733fe
    network: base-paid

tokens:
  base-paid:
    network: base-paid
    address: 0x71DDE9436305D2085331AF4737ec6f1fe876Cf9f
  base-usdc:
    network: base-paid
    address: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
  base-weth:
    network: base-paid
    address: 0x4200000000000000000000000000000000000006

orders:
  # vault-id generated with `openssl rand -hex 32`
  base-paid-buy:
    orderbook: base-paid
    inputs:
      - token: base-paid
        vault-id: 0x753620adad4586f5db51c507cee11eb8cc76fe4ea2cec0601bea94de81da3483
    outputs:
      - token: base-usdc
        vault-id: 0x753620adad4586f5db51c507cee11eb8cc76fe4ea2cec0601bea94de81da3483

  base-paid-sell:
    orderbook: base-paid
    inputs:
      - token: base-usdc
        vault-id: 0x4fceab68b4e60fcda947ad61b302501bf15aaf6d9833ad735d1b76bbb234b537
    outputs:
      - token: base-paid
        vault-id: 0x4fceab68b4e60fcda947ad61b302501bf15aaf6d9833ad735d1b76bbb234b537

scenarios:
    base-paid-fixed-grid:
        network: base-paid
        deployer: base-paid
        orderbook: base-paid
        bindings:
          # Ask for now, registry in future.
          uniswap-words: 0xae8c077205C4B5659b67e7527AF0094845DD35d0
          orderbook-subparser: 0xee873E21F8a6A256cb9f53BE491E569eA6cdd63E 

          # Input and Output Tokens from perspective of the Orcale
          input-token: 0x71DDE9436305D2085331AF4737ec6f1fe876Cf9f
          input-token-decimals: 18
          output-token: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913 
          output-token-decimals: 6 
          intermediate-token: 0x4200000000000000000000000000000000000006
          intermediate-token-decimals: 18
          
          # Twap fee for tokens
          twap-io-fee: '[uniswap-v3-fee-high]'
          twap-multiplier-fee: '[uniswap-v3-fee-low]'
          
          #Jittery binomial bits
          jittery-binomial-bits: 10

          # Bounty amount in $. For gas expensive networks this amount will be higher 
          bounty-amount: 3e16
        scenarios:
          buy:
            bindings:
              # Cooldown between two trades in seconds.
              cooldown-time: 14400
              # Mean amount of usdc offered per trade.
              # For gas expensive networks mean amount needs to be higher to compensate
              # for gas fee and bounty.
              mean-input-usdc-amount: 2e18 
              # Grid minimum price
              grid-min: 1e12
              # Grid maximum price
              grid-max: 10e18
              calculate-exact-quote: '''calculate-exact-buy-quote'
              calculate-io-ratio: '''calculate-io-ratio-buy'
            scenarios:
              prod:
                runs: 1
                bindings:
                  twap-deviation: 3e16
                  ensure-grid-band: '''ensure-grid-band-prod'
                  ensure-cooldown: '''ensure-cooldown-prod'
                  plottables: '''plottables-prod'
              test-twap:
                runs: 1
                bindings:
                  twap-deviation: 1e16
                  ensure-grid-band: '''ensure-grid-band-prod'
                  ensure-cooldown: '''ensure-cooldown-prod'
                  plottables: '''plottables-chart'
              chart:
                runs: 1000
                bindings:
                  twap-deviation: 1e18
                  ensure-grid-band: '''ensure-grid-band-chart'
                  ensure-cooldown: '''ensure-cooldown-chart'
                  plottables: '''plottables-chart'

          sell:
            bindings:
              # Cooldown between two trades in seconds.
              cooldown-time: 14400
              # Mean amount of usdc offered per trade.
              # For gas expensive networks mean amount needs to be higher to compensate
              # for gas fee and bounty.
              mean-input-usdc-amount: 2e18 
              # Grid minimum price
              grid-min: 1e12
              # Grid maximum price
              grid-max: 10e18
              calculate-exact-quote: '''calculate-exact-sell-quote'
              calculate-io-ratio: '''calculate-io-ratio-sell'
            scenarios:
              prod:
                runs: 1
                bindings:
                  twap-deviation: 3e16
                  ensure-grid-band: '''ensure-grid-band-prod'
                  ensure-cooldown: '''ensure-cooldown-prod'
                  plottables: '''plottables-prod'
              test-twap:
                runs: 1
                bindings:
                  twap-deviation: 1e16
                  ensure-grid-band: '''ensure-grid-band-prod'
                  ensure-cooldown: '''ensure-cooldown-prod'
                  plottables: '''plottables-chart'
              chart:
                runs: 1000
                bindings:
                  twap-deviation: 1e18
                  ensure-grid-band: '''ensure-grid-band-chart'
                  ensure-cooldown: '''ensure-cooldown-chart'
                  plottables: '''plottables-chart'

charts:
  paid-buy-fixed-grid: 
    scenario: base-paid-fixed-grid.buy.chart
    metrics:
      - label: Current PAID price.
        value: 0.3.3
        unit-prefix: $
        description: Price of PAID at current block.
      - label: Minimum PAID buy price.
        value: 0.3.0
        unit-prefix: $
        description: Grid minimum USDC/PAID ratio.
      - label: Maximum PAID buy price.
        value: 0.3.1
        unit-prefix: $
        description: Grid maximum USDC/PAID ratio.
      - label: Amount of USDC offered for first trade.
        value: 0.6
        description: Amount of USDC offered for the current block.
      - label: Amount of PAID received for frist trade.
        value: 0.5
        description: Amount of PAID received for USDC offered.
      - label: io-ratio PAID/USDC
        value: 0.7
        description: Ratio offered by the order for the current block accounting for bounty.
      - label: Bounty amount
        value: 0.8.2
        unit-prefix: $        
        description: Bounty paid for first order
      - label: Bounty ratio
        value: 0.8.5
        unit-suffix: '%'   
        description: Ratio of bounty amount to order amount
      - label: Mean amount
        value: 0.8.1
        unit-prefix: $        
        description: Mean amount of USDC sold 
      - label: Cooldown in minutes
        value: 0.8.6        
        description: Number of minutes between strategy running   
    plots:

  buy-paid-simulation:
    scenario: base-paid-fixed-grid.buy.chart
    plots:
      Mean amount of USDC offered:
        marks:
          - type: recty
            options:
              transform:
                type: binx
                content:
                  outputs:
                    y: "count"
                  options:
                    x: "0.3"
                    thresholds: 25
                    
      Mean amount of PAID received:
        marks:
          - type: recty
            options:
              transform:
                type: binx
                content:
                  outputs:
                    y: "count"
                  options:
                    x: "0.5"
                    thresholds: 25
              
  paid-sell-fixed-grid: 
    scenario: base-paid-fixed-grid.sell.chart
    metrics:
      - label: Current PAID price.
        value: 0.3.3
        unit-prefix: $
        description: Price of PAID at current block.
      - label: Minimum PAID buy price.
        value: 0.3.0
        unit-prefix: $
        description: Grid minimum USDC/PAID ratio.
      - label: Maximum PAID buy price.
        value: 0.3.1
        unit-prefix: $
        description: Grid maximum USDC/PAID ratio.
      - label: Amount of PAID offered for first trade.
        value: 0.6
        description: Amount of PAID offered for the current block.
      - label: Amount of USDC received for frist trade.
        value: 0.3
        description: Amount of USDC received for PAID offered.
      - label: io-ratio USDC/PAID
        value: 0.7
        description: Ratio offered by the order for the current block accounting for bounty.
      - label: Bounty amount
        value: 0.8.2
        unit-prefix: $        
        description: Bounty paid for first order
      - label: Bounty ratio
        value: 0.8.5
        unit-suffix: '%'   
        description: Ratio of bounty amount to order amount
      - label: Mean amount
        value: 0.8.1
        unit-prefix: $        
        description: Mean amount of USDC sold 
      - label: Cooldown in minutes
        value: 0.8.6        
        description: Number of minutes between strategy running   

  sell-paid-simulation:
    scenario: base-paid-fixed-grid.sell.chart
    plots:
      Mean amount of PAID offered:
        marks:
          - type: recty
            options:
              transform:
                type: binx
                content:
                  outputs:
                    y: "count"
                  options:
                    x: "0.5"
                    thresholds: 25
                    
      Mean amount of USDC received:
        marks:
          - type: recty
            options:
              transform:
                type: binx
                content:
                  outputs:
                    y: "count"
                  options:
                    x: "0.3"
                    thresholds: 25
                  
                      
deployments:
  base-paid-buy:
    scenario: base-paid-fixed-grid.buy.prod
    order: base-paid-buy
  base-paid-sell:
    scenario: base-paid-fixed-grid.sell.prod
    order: base-paid-sell
---
#cooldown-time !The minimum amount of seconds that must elapse between trades.
#bounty-amount !Amount of bounty offered.
#input-token !Input token from the perspective of order
#input-token-decimals !Input token decimals
#output-token !Output token from the perspective of order
#output-token-decimals !Output token decimals 

#intermediate-token !Intermediate token
#intermediate-token-decimals !Intermediate token decimals

#grid-min !Minimum trade ratio
#grid-max !Maximum trade ratio
#mean-input-usdc-amount !Mean amount in PAID received
#jittery-binomial-bits !Number of bits for jittery binomial

#twap-io-fee !Twap fee for the pool.
#twap-multiplier-fee !Twap multiplier fee.
#twap-deviation !Percentage twap deviation.

#test-last-time !Test last time for plotting.

#ensure-cooldown !Binding to enforce cooldown check.
#ensure-grid-band !Binding to ensure price grid
#calculate-exact-quote !Binding to calculate exact quote.
#calculate-io-ratio !Binding to calculate io-ratio.
#plottables !The binding for additional things we want to plot during testing.

#uniswap-words !The subparser for the Uniswap words
#orderbook-subparser !The subparser for the Orderbook words
#cooldown-key "cooldown-key"

#twap-check
  io-ratio: ,
  twap-30: uniswap-v3-twap-output-ratio(intermediate-token intermediate-token-decimals input-token input-token-decimals 1800 0 twap-io-fee),
  twap-ratio: decimal18-div(twap-30 io-ratio),
  :ensure(
    every(
      less-than(twap-ratio decimal18-add(1e18 twap-deviation)) greater-than(twap-ratio decimal18-saturating-sub(1e18 twap-deviation))
    )
    "twap check"
  );

#jittery-binomial
  seed:,
  binomial18-10:
    int-to-decimal18(bitwise-count-ones(bitwise-decode<0 jittery-binomial-bits>(hash(seed)))),
  noise18-1:
    int-mod(hash(seed 0) 1e18),
  jittery-combined:
    decimal18-add(binomial18-10 noise18-1),
  jittery-combined-normalized:
    decimal18-div(jittery-combined decimal18-add(1e18 int-to-decimal18(jittery-binomial-bits)));

#ensure-cooldown-chart
 _: test-last-time;
 
#ensure-cooldown-prod
 now: block-timestamp(),
 last-time: get(hash(order-hash() cooldown-key)),
 :ensure(
   greater-than-or-equal-to(
     now
     int-add(last-time cooldown-time)
   )
   "cooldown"
 ),
 :set(hash(order-hash() cooldown-key) now);

#ensure-grid-band-chart
  _ _ ratio-multiplier: ,
  current-price: decimal18-mul(
      uniswap-v3-twap-output-ratio(
        input-token input-token-decimals
        intermediate-token intermediate-token-decimals
        0 0
        twap-io-fee
      ) 
      ratio-multiplier
  );
  

#ensure-grid-band-prod
  grid-min-price grid-max-price ratio-multiplier: ,
  current-price: decimal18-mul(
      uniswap-v3-twap-output-ratio(
        input-token input-token-decimals
        intermediate-token intermediate-token-decimals
        0 0
        twap-io-fee
      ) 
      ratio-multiplier
  ),
  :ensure(
    every(
      greater-than-or-equal-to(current-price grid-min-price)
      less-than-or-equal-to(current-price grid-max-price)
    )
    "grid band"
  );

#calculate-io-ratio-buy
  usdc-amount18
  paid-amount18
  ratio-multiplier: ,
  io-ratio: decimal18-div(paid-amount18 decimal18-add(usdc-amount18 bounty-amount)),
  :call<'twap-check>(decimal18-mul(io-ratio decimal18-inv(ratio-multiplier))),
  /* Add io-ratio and max-op on stack*/
  _: usdc-amount18,
  _: io-ratio;

#calculate-io-ratio-sell
  usdc-amount18
  paid-amount18
  ratio-multiplier: ,
  io-ratio: decimal18-div(decimal18-saturating-sub(usdc-amount18 bounty-amount) paid-amount18),
  :call<'twap-check>(decimal18-inv(decimal18-mul(io-ratio ratio-multiplier))),
  /* Add io-ratio and max-op on stack*/
  _: paid-amount18,
  _: io-ratio;

#calculate-exact-buy-quote
  amount-usdc18 ratio-multiplier: ,
  _: uniswap-v3-quote-exact-input(intermediate-token input-token decimal18-mul(amount-usdc18 ratio-multiplier) twap-io-fee);

#calculate-exact-sell-quote
  amount-usdc18 ratio-multiplier: ,
  _: uniswap-v3-quote-exact-output(input-token intermediate-token decimal18-mul(amount-usdc18 ratio-multiplier) twap-io-fee);

#io-multiplier
  _: uniswap-v3-twap-output-ratio(
    output-token output-token-decimals
    intermediate-token intermediate-token-decimals
    0 0
    twap-multiplier-fee
  );

#plottables-chart
  cooldown
  mean-input-amount
  bounty-offered
  max-output-amount
  io-ratio: ,
  bounty-ratio: decimal18-mul(decimal18-div(bounty-amount mean-input-amount) 100e18),
  cooldown-in-minutes: int-to-decimal18(int-div(cooldown 60));

#plottables-prod
  _ _ _ _ _: ;

#calculate-io
  using-words-from uniswap-words orderbook-subparser

  io-ratio-multiplier: call<'io-multiplier>(),
  :call<'ensure-grid-band>(grid-min grid-max decimal18-inv(io-ratio-multiplier)),
  last-time: call<'ensure-cooldown>(),
  random-multiplier18: call<'jittery-binomial>(last-time), 
  jittered-amount-usdc18: decimal18-mul(
    decimal18-mul(mean-input-usdc-amount 2e18)
    random-multiplier18
  ), 
  paid-amount-output: call<'calculate-exact-quote>(jittered-amount-usdc18 io-ratio-multiplier),
  paid-amount18: decimal18-scale-18-dynamic(input-token-decimals paid-amount-output),
  max-output final-io-ratio: call<'calculate-io-ratio>(jittered-amount-usdc18 paid-amount18 io-ratio-multiplier),
  :call<'plottables>(cooldown-time mean-input-usdc-amount bounty-amount max-output final-io-ratio); 

#handle-io
:;