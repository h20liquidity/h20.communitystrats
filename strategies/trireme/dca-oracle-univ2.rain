# Strategy: Zerc Oracle based DCA
#
# High level, this strategy buys USDC denominated ZERC tokens at the end of every cooldown period
# provided that current calculated USDC denominated price of ZERC falls within the price gird.
#
# - Amount of ZERC bought per trade within the price band is randomized and centered around a mean,
#   value for which can be set within the bindings.
# - Range for the grid can also be provided within the bindings.
# - Strategy provides a guard against orcale manipulation by enforcing that the ratio of the current price offered
#   by the order to the 30 min average price is within the threshold, which can be provided as a binding in the strategy.
# - Strategy implements a bounty auction for gas management 
# 
# Target Network: POLYGON
# Quote (Input): USDC
# Base (Output): ZERC
# Token contract: 0xE1b3eb06806601828976e491914e3De18B5d6b28
# Token github: NA
# Liquidity protocol: Uniswap V2
# Liquidity pool address: https://www.dextools.io/app/en/polygon/pair-explorer/0x514480cf3ed104b5c34a17a15859a190e38e97af?t=1721741742208
# Liquidity pool fee: tbc
# Stable used https://polygonscan.com/address/0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359
# Stable used 0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359

networks:
  polygon-h20liquidity: 
    rpc: https://polygon-mainnet.g.alchemy.com/v2/y3BXawVv5uuP_g8BaDlKbKoTBGHo9zD9
    chain-id: 137 
    network-id: 137 
    currency: MATIC

subgraphs:
  polygon-h20liquidity: https://api.goldsky.com/api/public/project_clv14x04y9kzi01saerx7bxpg/subgraphs/ob4-polygon/0.1/gn
  
orderbooks:
  polygon-h20liquidity:
    address: 0x2f209e5b67A33B8fE96E28f24628dF6Da301c8eB
    network: polygon-h20liquidity
    subgraph: polygon-h20liquidity

deployers:
  polygon-h20liquidity:
    address: 0xF14E09601A47552De6aBd3A0B165607FaFd2B5Ba
    network: polygon-h20liquidity

tokens:
  polygon-usdc:
    network: polygon-h20liquidity
    address: 0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359
  polygon-zerc:
    network: polygon-h20liquidity
    address: 0xE1b3eb06806601828976e491914e3De18B5d6b28

orders:
  # vault-id generated with `openssl rand -hex 32`
  polygon-zerc-buy:
    orderbook: polygon-h20liquidity
    inputs:
      - token: polygon-zerc
        vault-id: 0xd302fedcbf6b3ea84812cde736439a97478b93fce4b546bc445f837f25589384
    outputs:
      - token: polygon-usdc
        vault-id: 0xd302fedcbf6b3ea84812cde736439a97478b93fce4b546bc445f837f25589384

  polygon-zerc-sell:
    orderbook: polygon-h20liquidity
    inputs:
      - token: polygon-usdc
        vault-id: 0xd302fedcbf6b3ea84812cde736439a97478b93fce4b546bc445f837f25589384
    outputs:
      - token: polygon-zerc
        vault-id: 0xd302fedcbf6b3ea84812cde736439a97478b93fce4b546bc445f837f25589384


scenarios:
    polygon-h20liquidity-oracle-dca:
        network: polygon-h20liquidity
        deployer: polygon-h20liquidity
        orderbook: polygon-h20liquidity
        bindings:
          # Ask for now, registry in future.
          uniswap-words: 0xbc609623F5020f6Fc7481024862cD5EE3FFf52D7
          orderbook-subparser: 0x8f037f2a3fF2dee510486D9C63A47A245991a4C1

          # Uniswap V3 factory addresses and init code
          uniswap-v2-factory: 0x5757371414417b8C6CAad45bAeF941aBc7d3Ab32
          uniswap-v2-init-code: 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f

          #Jittery binomial bits
          jittery-binomial-bits: 10
          jittery-binomial-min: 0.25
          jittery-binomial-max: 1

        scenarios:
          buy:
            bindings: 
              # Input token, this is the token being received.
              input-token: 0xE1b3eb06806601828976e491914e3De18B5d6b28
              
              # Output token, this is the token that is being offered.
              # Output token, mean amount 
              # Amount of output tokens offered per trade.
              # For gas expensive networks mean amount needs to be higher to compensate for gas fee and bounty.
              mean-output-amount : 1

              # Output token, this is the token being sold
              output-token: 0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359

              # Reserve token, If the output token is paired with the input token on a uniswap v2,
              # then the reserve is the input token. 
              # If the output token is NOT paired with the input token on a uniswap v2 pool,
              # then the reserve address is the token which the ouput token is paired with.
              reserve-token: 0xE1b3eb06806601828976e491914e3De18B5d6b28

              # Quote and Twap multiplier to get quote and 30min twap for input-output token pair.
              # If the output token is paired with the input token on a uniswap v2,
              # then set it to identity
              # If the output token is NOT paired with the input token on a uniswap v2 pool,
              # then set it to reserve
              io-quote: '''io-quote-identity' 

              # Params for bounty auction which is input token denominated. Min price, max price, time in seconds and unit increase
              bounty-min: 0.02
              bounty-max: 1
              bounty-unit-increase: 0.02
              bounty-unit-time: 10

              # Cooldown between two trades in seconds.
              cooldown-time: 60

              # Minimum io-ratio for the order. 
              # Strategy will not buy output token (ZERC) with input token (USDC) for a lower ratio.
              # Order will clear if price is above 1
              min-ratio: 1
            scenarios:
              prod:
                bindings:
                  ensure-min-ratio: '''ensure-min-ratio-prod'
                  ensure-cooldown: '''ensure-cooldown-prod'
                  plottables: '''plottables-prod'
                  cardano-check: '''cardano-check-prod'
              chart:
                runs: 1000
                bindings:
                  ensure-min-ratio: '''ensure-min-ratio-chart'
                  ensure-cooldown: '''ensure-cooldown-chart'
                  plottables: '''plottables-chart'
                  cardano-check: '''cardano-check-chart'
              metric:
                runs: 1
                bindings:
                  ensure-min-ratio: '''ensure-min-ratio-chart'
                  ensure-cooldown: '''ensure-cooldown-metric'
                  plottables: '''plottables-chart'
                  cardano-check: '''cardano-check-chart'
              test:
                runs: 1
                bindings:
                  ensure-min-ratio: '''ensure-min-ratio-chart'
                  ensure-cooldown: '''ensure-cooldown-metric'
                  plottables: '''plottables-prod'
                  cardano-check: '''cardano-check-chart'
              backtest:
                runs: 1
                blocks:
                  type: RangeWithInterval
                  value:
                    range: [59857426..]
                    interval: 1000
                bindings:
                  plottables: '''plottables-backtest'
                  ensure-min-ratio: '''ensure-min-ratio-chart'
                  ensure-cooldown: '''ensure-cooldown-metric'
                  cardano-check: '''cardano-check-chart'
          sell:
            bindings:
              # Input token, this is the token being received.
              input-token: 0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359 
              
              # Output token, this is the token that is being offered.
              # Output token, mean amount 
              # Amount of output tokens offered per trade.
              # For gas expensive networks mean amount needs to be higher to compensate for gas fee and bounty.
              mean-output-amount : 8

              # Output token, this is the token being sold
              output-token: 0xE1b3eb06806601828976e491914e3De18B5d6b28

              # Reserve token, If the output token is paired with the input token on a uniswap v2,
              # then the reserve is the input token. 
              # If the output token is NOT paired with the input token on a uniswap v2 pool,
              # then the reserve address is the token which the ouput token is paired with.
              reserve-token: 0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359

              # Quote and Twap multiplier to get quote and 30min twap for input-output token pair.
              # If the output token is paired with the input token on a uniswap v2,
              # then set it to identity
              # If the output token is NOT paired with the input token on a uniswap v2 pool,
              # then set it to reserve
              io-quote: '''io-quote-identity' 

              # Params for bounty auction which is input token denominated. Min price, max price, time in seconds and unit increase
              bounty-min: 0.01
              bounty-max: 0.15
              bounty-unit-increase: 0.02
              bounty-unit-time: 10

              # Cooldown between two trades in seconds.
              cooldown-time: 60

              # Minimum io-ratio for the order. 
              # Strategy will not buy output token with input token for a lower ratio.
              # If sell price is above 0.05 the order will go through
              min-ratio: 0.05
            scenarios:
              prod:
                bindings:
                  ensure-min-ratio: '''ensure-min-ratio-prod'
                  ensure-cooldown: '''ensure-cooldown-prod'
                  plottables: '''plottables-prod'
                  cardano-check: '''cardano-check-prod'                  
              chart:
                runs: 1000
                bindings:
                  ensure-min-ratio: '''ensure-min-ratio-chart'
                  ensure-cooldown: '''ensure-cooldown-chart'
                  plottables: '''plottables-chart'
                  cardano-check: '''cardano-check-chart'
              metric:
                runs: 1
                bindings:
                  ensure-min-ratio: '''ensure-min-ratio-chart'
                  ensure-cooldown: '''ensure-cooldown-metric'
                  plottables: '''plottables-chart'
                  cardano-check: '''cardano-check-chart'                  
              test:
                runs: 1
                bindings:
                  ensure-min-ratio: '''ensure-min-ratio-chart'
                  ensure-cooldown: '''ensure-cooldown-metric'
                  plottables: '''plottables-prod'
                  cardano-check: '''cardano-check-chart'
              backtest:
                runs: 1
                blocks:
                  type: RangeWithInterval
                  value:
                    range: [59857426..]
                    interval: 1000
                bindings:
                  plottables: '''plottables-backtest'
                  ensure-min-ratio: '''ensure-min-ratio-chart'
                  ensure-cooldown: '''ensure-cooldown-metric'
                  cardano-check: '''cardano-check-chart'
                        
charts:
  B. ZERC Buy Deployment Planning: 
    scenario: polygon-h20liquidity-oracle-dca.buy.metric
    metrics:
      
      - label: Amount of USDC offered for first trade.
        value: 0.3
        description: Amount of USDC offered for the current block.
      - label: Amount of ZERC received for frist trade.
        value: 0.4
        description: Amount of ZERC received for USDC offered.
      - label: io-ratio ZERC/USDC
        value: 0.6
        description: Ratio offered by the order for the current block accounting for bounty.
      - label: Minimum ZERC Bounty amount
        value: 0.7.4
        unit-prefix: $        
        description: Minimum bounty offered
      - label: Maximum ZERC Bounty amount
        value: 0.7.5
        unit-prefix: $        
        description: Maximum bounty offered
      - label: Bounty increase per minute
        value: 0.7.7
        unit-prefix: $   
        description: Amount by which bounty increases every minute after cooldown.
      - label: Max Bounty ratio
        value: 0.7.6
        unit-suffix: '%'   
        description: Ratio of max bounty amount to order amount
      - label: Mean amount
        value: 0.7.3
        unit-prefix: $        
        description: Mean amount of USDC sold 
      - label: Cooldown in minutes
        value: 0.7.8        
        description: Number of minutes between strategy running
      - label: Trades per hour
        value: 0.7.9       
        description: Number of trades per hour
      - label: Cummulative amount traded daily
        value: 0.7.10     
        unit-prefix: $ 
        description: Cummulative dollar equivalent amount of ZERC tokens sold in a day.
      - label: Cummulative amount traded weekly
        value: 0.7.11     
        unit-prefix: $ 
        description: Cummulative dollar equivalent amount of ZERC tokens sold in a week.
      - label: Cummulative amount traded montly
        value: 0.7.12     
        unit-prefix: $ 
        description: Cummulative dollar equivalent amount of ZERC tokens sold in a month.  

  D. ZERC Sell Deployment Planning: 
    scenario: polygon-h20liquidity-oracle-dca.sell.metric
    metrics:
      - label: Amount of ZERC offered for first trade.
        value: 0.3
        description: Amount of ZERC offered for the current block.
      - label: Amount of USDC received for frist trade.
        value: 0.4
        description: Amount of USDC received for USDC offered.
      - label: io-ratio USDC/ZERC
        value: 0.6
        description: Ratio offered by the order for the current block accounting for bounty.
      - label: Minimum Bounty amount
        value: 0.7.4
        unit-prefix: $        
        description: Minimum USDC bounty offered 
      - label: Maximum Bounty amount
        value: 0.7.5
        unit-prefix: $        
        description: Maximum USDC bounty offered
      - label: Bounty increase per minute
        value: 0.7.7
        unit-prefix: $   
        description: Amount by which bounty increases every minute after cooldown.
      - label: Max Bounty ratio
        value: 0.7.6
        unit-suffix: '%'   
        description: Ratio of max bounty amount to order amount
      - label: Mean amount
        value: 0.7.3
        unit-prefix: $        
        description: Mean amount of ZERC sold 
      - label: Cooldown in minutes
        value: 0.7.8        
        description: Number of minutes between strategy running
      - label: Trades per hour
        value: 0.7.9       
        description: Number of trades per hour
      - label: Cummulative amount traded daily
        value: 0.7.10     
        unit-prefix: $ 
        description: Cummulative dollar equivalent amount of ZERC tokens sold in a day.
      - label: Cummulative amount traded weekly
        value: 0.7.11     
        unit-prefix: $ 
        description: Cummulative dollar equivalent amount of ZERC tokens sold in a week.
      - label: Cummulative amount traded montly
        value: 0.7.12     
        unit-prefix: $ 
        description: Cummulative dollar equivalent amount of ZERC tokens sold in a month.    

    plots:

  A. ZERC Buy Simulation:
    scenario: polygon-h20liquidity-oracle-dca.buy.chart
    plots:
      Mean amount of USDC offered:
        marks:
          - type: recty
            options:
              transform:
                type: binx
                content:
                  outputs:
                    y: "count"
                  options:
                    x: "0.3"
                    thresholds: 25
                    
      Mean amount of ZERC received:
        marks:
          - type: recty
            options:
              transform:
                type: binx
                content:
                  outputs:
                    y: "count"
                  options: 
                    x: "0.4"
                    thresholds: 25

  E. ZERC Buy Backtest:
    scenario: polygon-h20liquidity-oracle-dca.buy.backtest
    plots:
      Stop Limit:
        x:
          label: 'Block Number'
        y:
          label: 'ZERC/USDC Ratio'
        marks:
          - type: line
            options:
              stroke: blue
              x: 0.7.4
              y: 0.7.2
          - type: line
            options:
              stroke: red
              x: 0.7.4
              y: 0.7.3
          
                    
  C. ZERC Sell Simulation:
    scenario: polygon-h20liquidity-oracle-dca.sell.chart
    plots:
      Mean amount of ZERC offered:
        marks:
          - type: recty
            options:
              transform:
                type: binx
                content:
                  outputs:
                    y: "count"
                  options:
                    x: "0.3"
                    thresholds: 25
                    
      Mean amount of USDC received:
        marks:
          - type: recty
            options:
              transform:
                type: binx
                content:
                  outputs:
                    y: "count"
                  options: 
                    x: "0.4"
                    thresholds: 25

  F. ZERC Sell Backtest:
    scenario: polygon-h20liquidity-oracle-dca.sell.backtest
    plots:
      Stop Limit:
        x:
          label: 'Block Number'
        y:
          label: 'USDC/ZERC Ratio'
        marks:
          - type: line
            options:
              stroke: blue
              x: 0.7.4
              y: 0.7.2
          - type: line
            options:
              stroke: red
              x: 0.7.4
              y: 0.7.3

deployments:
  polygon-zerc-buy:
    scenario: polygon-h20liquidity-oracle-dca.buy.prod
    order: polygon-zerc-buy
  
  polygon-zerc-sell:
    scenario: polygon-h20liquidity-oracle-dca.sell.prod
    order: polygon-zerc-sell
---
#cooldown-time !The minimum amount of seconds that must elapse between trades.
#bounty-min !Minimum bounty to offer for each trade in USD.
#bounty-unit-increase !Amount to increase bounty per unit time.
#bounty-unit-time !Unit of time to increase the bounty.
#bounty-max !Maximum bounty that can be offered. 

#input-token !Input token from the perspective of the order.
#output-token !Ouput token from the perspective of the order.
#reserve-token !Token which is paired with the ouput token on uniswap-v2 pool.
#io-quote !Binding to get the quote for input output token pair.

#min-ratio !Minimum io-ratio for the order.
#mean-output-amount !Mean dollar denominated amount of stable tokens traded.
#jittery-binomial-bits !Number of bits for jittery binomial to calculate random amount of stable token traded per trade.
#jittery-binomial-min !Minimum value of the random multiplier produced by jittery binomial.
#jittery-binomial-max !Maximum value of the random multiplier produced by jittery binomial.

#test-current-time !Test current time for plotting.
#test-last-time !Test last time for plotting.

#ensure-cooldown !Binding to enforce cooldown check.
#ensure-min-ratio !Binding to enforce price remains between minimum and maximum price set.
#plottables !The binding for additional things we want to plot during testing.
#cardano-check !Cardano check to ensure price change within the block.

#uniswap-words !The subparser for the Uniswap words
#uniswap-v2-factory !Uniswap v3 factory address.
#uniswap-v2-init-code !Uniswap v3 init code hash.
#orderbook-subparser !The subparser for the Orderbook words
#cooldown-key "cooldown-key"

#jittery-binomial-rolls
  seed: ,
  roll-0: call<'jittery-binomial>(seed 0),
  roll-1: call<'jittery-binomial>(seed 1),
  roll-2: call<'jittery-binomial>(seed 2),
  roll-3: call<'jittery-binomial>(seed 3),
  roll-4: call<'jittery-binomial>(seed 4),

  random-multiplier: conditions(
    every(
      greater-than-or-equal-to(roll-0 jittery-binomial-min)
      less-than-or-equal-to(roll-0 jittery-binomial-max)
    )
    roll-0
    every(
      greater-than-or-equal-to(roll-1 jittery-binomial-min)
      less-than-or-equal-to(roll-1 jittery-binomial-max)
    )
    roll-1
    every(
      greater-than-or-equal-to(roll-2 jittery-binomial-min)
      less-than-or-equal-to(roll-2 jittery-binomial-max)
    )
    roll-2
    every(
      greater-than-or-equal-to(roll-3 jittery-binomial-min)
      less-than-or-equal-to(roll-3 jittery-binomial-max)
    )
    roll-3
    every(
      greater-than-or-equal-to(roll-4 jittery-binomial-min)
      less-than-or-equal-to(roll-4 jittery-binomial-max)
    )
    roll-4
    "default" 0.5
  );

#jittery-binomial
  seed roll-index:,
  binomial18-10:
    bitwise-count-ones(bitwise-decode<0 jittery-binomial-bits>(hash(seed roll-index))),
  noise18-1:
    mod(hash(seed 0) 1),
  jittery-combined:
    add(binomial18-10 noise18-1),
  jittery-combined-normalized:
    div(jittery-combined add(1 jittery-binomial-bits));

#bounty-auction
  time-since-cooldown: ,
  bounty: min(
    linear-growth(
      bounty-min
      div(bounty-unit-increase bounty-unit-time)
      time-since-cooldown
    )
    bounty-max
  );

#ensure-cooldown-metric
 _ _: now() 0;

#ensure-cooldown-chart
 _ _: test-current-time test-last-time;
 
#ensure-cooldown-prod
 current-time: now(),
 last-time: get(hash(order-hash() cooldown-key)),
 :ensure(
   greater-than-or-equal-to(
     current-time
     add(last-time cooldown-time)
   )
   "cooldown"
 ),
 :set(hash(order-hash() cooldown-key) current-time);

#ensure-min-ratio-chart
  _: ;
  
#ensure-min-ratio-prod
  order-io-ratio: ,
  :ensure(
    greater-than(order-io-ratio min-ratio)
    "min ratio"
  );

#calculate-io-ratio
  output-amount
  input-amount
  time-since-cooldown: ,
  io-ratio: div(saturating-sub(input-amount call<'bounty-auction>(time-since-cooldown)) output-amount),
  /* Add io-ratio and max-op on stack*/
  _: output-amount,
  _: io-ratio;

#io-quote-reserve
  reserve-amount: ,
  _: output-token reserve-token(
    reserve-token input-token
    reserve-amount
    uniswap-v2-factory uniswap-v2-init-code
  );

#io-quote-identity
  _: ;

#cardano-check-chart
  _: ;

#cardano-check-prod
  last-time: ,
  :ensure(less-than(last-time now()) "Price change.");

#calculate-exact-quote
  output-amount: ,
  output-to-reserve last-price-timestamp: uniswap-v2-quote-exact-input<1>(
    output-token reserve-token
    output-amount
    uniswap-v2-factory uniswap-v2-init-code
  ),
  :call<'cardano-check>(last-price-timestamp),
  reserve-to-input: call<'io-quote>(output-to-reserve);



#plottables-chart
  max-output-amount io-ratio: ,
  _: cooldown-time,
  _: mean-output-amount,
  _: bounty-min,
  _: bounty-max,
  max-bounty-ratio: mul(div(bounty-max mean-output-amount) 100),
  bounty-increase-per-minute: mul(div(bounty-unit-increase bounty-unit-time) 60),
  cooldown-in-minutes: div(cooldown-time 60),
  cooldown-in-hours: div(60 cooldown-in-minutes),
  total-amount-daily: mul(cooldown-in-hours mean-output-amount 24),
  total-amount-weekly: mul(total-amount-daily 7),
  total-amount-montly: mul(total-amount-daily 30);


#plottables-prod
  _ _: ;

#plottables-backtest
  _ _: ,
  current-price: call<'io-quote>(uniswap-v2-quote-exact-input(
    output-token reserve-token
    1
    uniswap-v2-factory uniswap-v2-init-code
  )),
  _: min-ratio,
  _: block-number();

#calculate-io
  using-words-from uniswap-words orderbook-subparser

  current-time last-time: call<'ensure-cooldown>(),
  random-multiplier18: call<'jittery-binomial-rolls>(last-time), 
  jittered-output-amount: mul(
    mul(mean-output-amount 2)
    random-multiplier18
  ), 
  quote-input-amount: call<'calculate-exact-quote>(jittered-output-amount),
  max-output final-io-ratio: call<'calculate-io-ratio>(
    jittered-output-amount
    quote-input-amount
    saturating-sub(current-time add(last-time cooldown-time))
  ),
  :call<'ensure-min-ratio>(final-io-ratio),
  :call<'plottables>(max-output final-io-ratio); 

#handle-io
:ensure(
    greater-than-or-equal-to(
      uint256-output-vault-decrease()
      scale-n-dynamic(output-token-decimals() calculated-max-output())
    )
    "Partial trade"
  );