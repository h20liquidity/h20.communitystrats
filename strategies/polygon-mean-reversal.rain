networks:
   h20-community-polygon: 
     rpc: https://polygon-mainnet.g.alchemy.com/v2/y3BXawVv5uuP_g8BaDlKbKoTBGHo9zD9
     chain-id: 137 
     network-id: 137 
     currency: MATIC

subgraphs:
   h20-community-polygon: https://api.thegraph.com/subgraphs/name/h20liquidity/polygon-0xc95a5f8e

orderbooks:
   h20-community-polygon:
     address: 0xc95A5f8eFe14d7a20BD2E5BAFEC4E71f8Ce0B9A6
     network: h20-community-polygon
     subgraph: h20-community-polygon

deployers:
   h20-community-polygon:
     address: 0xB3aC858bEAf7814892d3946A8C109A7D701DF8E7
     network: h20-community-polygon

tokens:
   polygon-geod:
     address: 0xAC0F66379A6d7801D7726d5a943356A172549Adb
     decimals: 18
     network: h20-community-polygon
   polygon-usdc:
     address: 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174
     decimals: 6
     network: h20-community-polygon

orders:
   # vault-id generated with `openssl rand -hex 32`
   polygon-geod-mean:
     orderbook: h20-community-polygon
     inputs:
       - token: polygon-geod
         vault-id: 0x0ff175d201d67dde1f3318f379c2e6eae4c9d198cef345fc0459d6067c68da9b
       - token: polygon-usdc
         vault-id: 0x0ff175d201d67dde1f3318f379c2e6eae4c9d198cef345fc0459d6067c68da9b
     outputs:
       - token: polygon-geod
         vault-id: 0x0ff175d201d67dde1f3318f379c2e6eae4c9d198cef345fc0459d6067c68da9b
       - token: polygon-usdc
         vault-id: 0x0ff175d201d67dde1f3318f379c2e6eae4c9d198cef345fc0459d6067c68da9b

scenarios:
   polygon-mean:
     network: h20-community-polygon
     deployer: h20-community-polygon
     orderbook: h20-community-polygon
     bindings:
       # Ask for now registry in the future. 
       orderbook-words: 0x8f037f2a3fF2dee510486D9C63A47A245991a4C1
       uniswap-words: 0xbc609623F5020f6Fc7481024862cD5EE3FFf52D7

       # Uniswap V3 factory addresses and init code
       uniswap-v3-factory: '[uniswap-v3-factory]'
       uniswap-v3-init-code: '[uniswap-v3-init-code]'

     scenarios:
       geod:
         bindings:
           # Base token is the altcoin that is being traded.
           base-token: 0xAC0F66379A6d7801D7726d5a943356A172549Adb

           # Quote token is the token in which base token is denominated in.
           quote-token: 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174

           # Boundary value to set as a ratio of trend and price distance.
           # Default set it to 0.03 which is 3%
           boundary-value: 0.03

           # Amount of quote token to enter the long position with.
           # The number of quote tokens that will be offered for the first buy.
           # Sucessive buys will be the same amount.
           buy-volume: 50

           # Seconds interval to get the twap values.
           # Set it to lower value to capture volatility in the recent trends.
           # Default set to 5 mins or 300 seconds.
           second-interval: 300

           # Default value for the stop loss for the sell.
           default-stop-loss: 0.16

           # Uniswap pool fee for base-quote token pair.
           poolfee: "[uniswap-v3-fee-medium]"
         scenarios:
           plot:
             runs: 1
             bindings:
               calculate-price: '''calculate-price-plot'
               plottables: '''plottables-plot'
           prod:
             bindings:
               calculate-price: '''calculate-price-prod'
               plottables: '''plottables-prod'

charts:
   geod-mean:
     scenario: polygon-mean.geod.plot
     metrics:
       - label: Current price of GEOD.
         value: 0.0
         description: Current price of GEOD denominated in USDC.
       - label: Buy volume.
         value: 0.5.0
         description: Amount of USDC offered for every long condition.
       - label: Boundary value
         value: 0.5.1
         description: Boundary threshold, ratio of trend and price distance.
       - label: Seconds interval.
         value: 0.5.2
         description: Seconds multiplier for calculating twap.

deployments:
   polygon-mean.geod:
    scenario: polygon-mean.geod.prod
    order: polygon-geod-mean
 ---
/* Shitcoin Inefficiency Milker - Long only */
#orderbook-words !The parsers for arb.
#uniswap-words !Uniswap words for arb.
#uniswap-v3-factory !Uniswap v3 factory address.
#uniswap-v3-init-code !Uniswap v3 init code hash.

#base-token !The shitcoin that is being traded.
#quote-token !What the shitcoin is priced in USD/WETH.
#poolfee !The fee on the uniswap pool.
#boundary-value !The threshold for differences of the moving average that trigger the trade.
#buy-volume !The amount of WETH/USD that is being traded.
#default-stop-loss !Intial stop loss
#second-interval !The amount of seconds which are used for the candel length.

#calculate-price !Binding to calculate io-ratio for the order.
#plottables !Binding for plotting variables.

/* core logic */
#calculate-io 
using-words-from orderbook-words uniswap-words

/* obtain prices */
current-price: uniswap-v3-twap-output-ratio(base-token quote-token 0 0 uniswap-v3-factory uniswap-v3-init-code poolfee),
two-x-average: uniswap-v3-twap-output-ratio(base-token quote-token mul(2 second-interval) 0 uniswap-v3-factory uniswap-v3-init-code poolfee),

/*0*/
long-twap-0: uniswap-v3-twap-output-ratio(base-token quote-token mul(10 second-interval) mul(0 second-interval) uniswap-v3-factory uniswap-v3-init-code poolfee),
medium-twap-0: uniswap-v3-twap-output-ratio(base-token quote-token mul(5 second-interval) mul(0 second-interval) uniswap-v3-factory uniswap-v3-init-code poolfee),
short-twap-0: uniswap-v3-twap-output-ratio(base-token quote-token mul(1 second-interval) mul(0 second-interval) uniswap-v3-factory uniswap-v3-init-code poolfee),

/* 1 */
long-twap-1: uniswap-v3-twap-output-ratio(quote-token base-token mul(11 second-interval) mul(1 second-interval) uniswap-v3-factory uniswap-v3-init-code poolfee),
medium-twap-1: uniswap-v3-twap-output-ratio(quote-token base-token mul(6 second-interval) mul(1 second-interval) uniswap-v3-factory uniswap-v3-init-code poolfee),
short-twap-1: uniswap-v3-twap-output-ratio(quote-token base-token mul(2 second-interval) mul(1 second-interval) uniswap-v3-factory uniswap-v3-init-code poolfee),

/* obtain boundaries */
boundary-0 : mul(short-twap-0 boundary-value),
boundary-1 : mul(short-twap-1 boundary-value),

/* calculate distances 0 */
svalue-0 sneg-0: call<'calculate-distance>(short-twap-0 medium-twap-0 long-twap-0),

/* calculate distances 3 */
svalue-1 sneg-1: call<'calculate-distance>(short-twap-1 medium-twap-1 long-twap-1),


/*long-condition-calls*/
lccall-0: call<'longcondition>(svalue-0 sneg-0 boundary-0 current-price two-x-average),
lccall-1: call<'longcondition>(svalue-1 sneg-1 boundary-1 current-price two-x-average),


enterlong : any(lccall-0 lccall-1),

/*context*/
solver-input: input-token(),
solver-output:  output-token(),

/* quote token = WETH, USDT. Base token = shitcoin.  */
buycontexts:every(
  equal-to(solver-input base-token)
  equal-to(solver-output quote-token)), 
sellcontexts:every(
  equal-to(solver-input quote-token)
  equal-to(solver-output base-token)),

/*memory*/ 
sl-value: any(
          mul(get("entry-price-20062024") 0.96)
          default-stop-loss
        ),

/*trade conditions*/
long-condition: every(
  buycontexts
  is-zero(get("is-long-20062024")) 
  enterlong),
tp-condition: every(     
  sellcontexts
  get("is-long-20062024") 
  greater-than(block-timestamp() add(get("entry-time-20062024") mul(second-interval 10)))
  less-than(medium-twap-0 long-twap-0)),
sl-condition: every(
  sellcontexts
  get("is-long-20062024")
  less-than(current-price sl-value)),

/*entry memory*/
:set("entry-price-20062024" if(long-condition mul(current-price 0.99) get("entry-price-20062024"))),
:set("entry-time-20062024" if(long-condition block-timestamp() get("entry-time-20062024"))),

/* is long sets */
:set("is-long-20062024" if(long-condition 1 get("is-long-20062024"))),
:set("is-long-20062024" if(tp-condition 0 get("is-long-20062024"))),
:set("is-long-20062024" if(sl-condition 0 get("is-long-20062024"))),

/*calculate amount*/
amount:if(
  long-condition 
  buy-volume
  scale-18-dynamic(output-token-decimals() uint256-output-vault-before()) 
  ),

/*calculate price */
price: call<'calculate-price>(long-condition tp-condition sl-condition sl-value current-price),
:call<'plottables>();

#handle-io
/* avoid partial vault clears as it would break our ratio logic */
:ensure(
    greater-than-or-equal-to(
      uint256-output-vault-decrease()
      scale-n-dynamic(output-token-decimals() calculated-max-output())
    )
    "Partial trade"
  );

/* Entry Condition for opening position */
#longcondition
  svalue-n sneg-n boundary-n current-price two-x-average:,
  result: every(greater-than(svalue-n boundary-n) greater-than(current-price two-x-average) sneg-n);

#calculate-distance
  short-twap medium-twap long-twap: ,

  tcheck: greater-than(medium-twap long-twap), 
  trend-distance: if(
    is-zero(tcheck)
    saturating-sub(long-twap medium-twap)
    saturating-sub(medium-twap long-twap)
  ), 
  tneg-bool: is-zero(tcheck),

  pcheck: greater-than(short-twap long-twap), 
  price-distance: if(
    is-zero(pcheck)
    saturating-sub(long-twap short-twap)
    saturating-sub(short-twap long-twap)
  ), 
  pneg-bool: is-zero(pcheck),

  /* checking how we need to handle the sub */
  both-pos: is-zero(add(tneg-bool pneg-bool)),
  both-neg: equal-to(add(tneg-bool pneg-bool) decimal18-to-uint256(2)),
  first-neg: every(tneg-bool is-zero(pneg-bool)),
  first-pos: every(is-zero(tneg-bool) pneg-bool),
  differs: any(first-neg first-pos),
  which-greater: greater-than(price-distance trend-distance), 

  svalue: if(
    is-zero(differs)
    if(which-greater
      saturating-sub(price-distance trend-distance)
      saturating-sub(trend-distance price-distance))
    add(price-distance trend-distance)
  ),

  sneg:
   any(
     every(both-pos is-zero(which-greater))
     every(both-neg which-greater)
     first-neg
   );

#calculate-price-plot
_ _ _ _ _: ;

#calculate-price-prod
  long-condition tp-condition sl-condition sl-value current-price: ,
  price: conditions(
    long-condition mul(inv(current-price) 0.99)
    tp-condition mul(current-price 0.99)
    sl-condition sl-value
    "Price condition"  
  );

#plottables-plot
  _: buy-volume,
  _: boundary-value,
  _: second-interval;

#plottables-prod
:;