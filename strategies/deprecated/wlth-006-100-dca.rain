# Strategy: Fixed Grid
#
# High level, this strategy buys mean amount of WLTH tokens at the end of every cooldown period
# provided that current price feteched from the WLTH/USDC uni-v3 pool falls in a particular range.
#
# - Amount of WLTH bought per trade within the price band is randomized and centered around a mean,
#   value for which can be set within the bindings.
# - Range for the grid can also be provided within the bindings
# - Strategy provides a guard against 

networks:
  base-wlth: 
    rpc: https://mainnet.base.org 
    chain-id: 8453 
    network-id: 8453 
    currency: ETH

subgraphs:
  base-wlth: https://api.thegraph.com/subgraphs/name/h20liquidity/base-0x2aee87
  
orderbooks:
  base-wlth:
    address: 0x2AeE87D75CD000583DAEC7A28db103B1c0c18b76
    network: base-wlth
    subgraph: base-wlth

deployers:
  base-wlth:
    address: 0xfca89cD12Ba1346b1ac570ed988AB43b812733fe
    network: base-wlth

tokens:
  base-cw-wlth:
    network: base-wlth
    address: 0x99b2B1A2aDB02B38222ADcD057783D7e5D1FCC7D
  base-usdc:
    network: base-wlth
    address: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913

orders:
  # vault-id generated with `openssl rand -hex 32`
  base-wlth-buy:
    orderbook: base-wlth
    inputs:
      - token: base-cw-wlth
        vault-id: 0x2127c093052ddbaab74a719a06a4f70c29fcd259dfdfea34e30a24d1b1cc635a
    outputs:
      - token: base-usdc
        vault-id: 0x2127c093052ddbaab74a719a06a4f70c29fcd259dfdfea34e30a24d1b1cc635a

  base-wlth-sell:
    orderbook: base-wlth
    inputs:
      - token: base-usdc
        vault-id: 0x8c76bd3a0a7383a77186863534a49f5302ac3b6eacec14b8b6227c4c3ad7949f
    outputs:
      - token: base-cw-wlth
        vault-id: 0x8c76bd3a0a7383a77186863534a49f5302ac3b6eacec14b8b6227c4c3ad7949f

scenarios:
    base-wlth-fixed-grid:
        network: base-wlth
        deployer: base-wlth
        orderbook: base-wlth
        bindings:
          # Ask for now, registry in future.
          uniswap-words: 0xae8c077205C4B5659b67e7527AF0094845DD35d0
          orderbook-subparser: 0xee873E21F8a6A256cb9f53BE491E569eA6cdd63E

          # Input and Output Tokens from perspective of the Orcale
          input-token: 0x99b2B1A2aDB02B38222ADcD057783D7e5D1FCC7D
          input-token-decimals: 18
          output-token: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
          output-token-decimals: 6

          # Twap fee for tokens
          twap-fee: '[uniswap-v3-fee-medium]'

          #Jittery binomial bits 
          jittery-binomial-bits: 10 

          # Bounty amount in $. For gas expensive networks this amount will be higher 
          bounty-amount: 3e16
        scenarios:
          buy:
            bindings:
              # Cooldown between two trades in seconds.
              cooldown-time: 14400
              # Mean amount of usdc offered per trade.
              # For gas expensive networks mean amount needs to be higher to compensate
              # for gas fee and bounty. 
              mean-input-usdc-amount: 10e18
              # Grid minimum price 
              grid-min: 6e16
              # Grid maximum price
              grid-max: 100e18
              calculate-exact-quote: '''calculate-exact-buy-quote'
              calculate-io-ratio: '''calculate-io-ratio-buy'

            scenarios:
              deviation:
                bindings:
                  twap-deviation: 3e16
                scenarios:
                  prod:
                    bindings:
                      twap-check: '''twap-check-prod'
                      ensure-grid-band: '''ensure-grid-band-prod'
                      ensure-cooldown: '''ensure-cooldown-prod'
                      plottables: '''plottables-prod'
                  chart:
                    runs: 1000
                    bindings:
                      twap-check: '''twap-check-chart'
                      ensure-grid-band: '''ensure-grid-band-chart'
                      ensure-cooldown: '''ensure-cooldown-chart'
                      plottables: '''plottables-chart'

              test:
                bindings:
                  twap-deviation: 1e16
                  twap-check: '''twap-check-prod'
                  ensure-grid-band: '''ensure-grid-band-chart'
                  ensure-cooldown: '''ensure-cooldown-chart'
                  plottables: '''plottables-chart'
                  

          sell:
            bindings:
              # Cooldown between two trades in seconds.
              cooldown-time: 14400
              # Mean amount of usdc offered per trade.
              # For gas expensive networks mean amount needs to be higher to compensate
              # for gas fee and bounty. 
              mean-input-usdc-amount: 10e18
              # Grid minimum price 
              grid-min: 6e16
              # Grid maximum price
              grid-max: 100e18
              calculate-exact-quote: '''calculate-exact-sell-quote'
              calculate-io-ratio: '''calculate-io-ratio-sell'
            scenarios:
              deviation:
                bindings:
                  # Threshold for oracle price manipulation
                  # Set default at 3%, adjust as necessary.
                  # Adjust based on input currency, bounty amount and mean input amount.
                  twap-deviation: 3e16
                scenarios:
                  prod:
                    bindings:
                      twap-check: '''twap-check-prod'
                      ensure-grid-band: '''ensure-grid-band-prod'
                      ensure-cooldown: '''ensure-cooldown-prod'
                      plottables: '''plottables-prod'
                  chart:
                    runs: 1000
                    bindings:
                      twap-check: '''twap-check-chart'
                      ensure-grid-band: '''ensure-grid-band-chart'
                      ensure-cooldown: '''ensure-cooldown-chart'
                      plottables: '''plottables-chart'

              test:
                bindings:
                  twap-deviation: 1e16
                  twap-check: '''twap-check-prod'
                  ensure-grid-band: '''ensure-grid-band-chart'
                  ensure-cooldown: '''ensure-cooldown-chart'
                  plottables: '''plottables-chart'
                  
          
              
charts:
  wlth-buy-fixed-grid: 
    scenario: base-wlth-fixed-grid.buy.deviation.chart
    metrics:
      - label: Current WLTH price.
        value: 0.2.2
        unit-prefix: $
        description: Price of WLTH at current block.
      - label: Minimum WLTH buy price.
        value: 0.2.0
        unit-prefix: $
        description: Grid minimum USDC/WLTH ratio.
      - label: Maximum WLTH buy price.
        value: 0.2.1
        unit-prefix: $
        description: Grid maximum USDC/WLTH ratio.
      - label: Amount of USDC offered for first trade.
        value: 0.7
        description: Amount of USDC offered for the current block.
      - label: Amount of WLTH received for frist trade.
        value: 0.5
        description: Amount of WLTH received for USDC offered.
      - label: io-ratio WLTH/USDC
        value: 0.8
        description: Ratio offered by the order for the current block accounting for bounty.
      - label: Bounty amount
        value: 0.7.5
        unit-prefix: $        
        description: Bounty paid for first order
      - label: Bounty ratio
        value: 0.7.8
        unit-suffix: '%'   
        description: Ratio of bounty amount to order amount
      - label: Mean amount
        value: 0.7.4
        unit-prefix: $        
        description: Mean amount of USDC sold 
      - label: Cooldown in minutes
        value: 0.7.9        
        description: Number of minutes between strategy running
      - label: Trades per hour
        value: 0.7.10       
        description: Number of trades per hour
      - label: Strategy twap deviation
        value: 0.7.6
        unit-suffix: '%'         
        description: Twap deviation percentage acceptable     
      - label: Current twap deviation
        value: 0.7.7
        unit-suffix: '%'       
        description: Twap deviation occuring at current block.       

    plots:

  buy-wlth-simulation:
    scenario: base-wlth-fixed-grid.buy.deviation.chart
    plots:
      Mean amount of USDC offered:
        marks:
          - type: recty
            options:
              transform:
                type: binx
                content:
                  outputs:
                    y: "count"
                  options:
                    x: "0.2"
                    thresholds: 20
                    
      Mean amount of WLTH received:
        marks:
          - type: recty
            options:
              transform:
                type: binx
                content:
                  outputs:
                    y: "count"
                  options:
                    x: "0.5"
                    thresholds: 20
              
  wlth-sell-fixed-grid: 
    scenario: base-wlth-fixed-grid.sell.deviation.chart
    metrics:
      - label: Current WLTH price
        value: 0.2.2
        unit-prefix: $
        description: Price of WLTH at current block
      - label: Minimum sell price
        value: 0.2.0
        description: Strategy will not sell WLTH below this price
      - label: Maximum sell price
        value: 0.2.1
        description: Strategy will not sell WLTH above this price
      - label: First order, WLTH sold
        value: 0.7
        description: Amount of WLTH sold
      - label: First order, USDC bought
        value: 0.2
        unit-prefix: $        
        description: Amount of USDC bought
      - label: io-ratio USDC/WLTH
        value: 0.8       
        description: Ratio offered by the order for the current block accounting for bounty.
      - label: Bounty amount
        value: 0.7.5
        unit-prefix: $        
        description: Bounty paid for first order
      - label: Bounty ratio
        value: 0.7.8
        unit-suffix: '%'   
        description: Ratio of bounty amount to order amount
      - label: Mean amount
        value: 0.7.4
        unit-prefix: $        
        description: Mean amount of USDC sold 
      - label: Cooldown in minutes
        value: 0.7.9        
        description: Number of minutes between strategy running
      - label: Trades per hour
        value: 0.7.10       
        description: Number of trades per hour
      - label: Strategy twap deviation
        value: 0.7.6
        unit-suffix: '%'         
        description: Twap deviation percentage acceptable     
      - label: Current twap deviation
        value: 0.7.7
        unit-suffix: '%'       
        description: Twap deviation occuring at current block.   

  sell-wlth-simulation:
    scenario: base-wlth-fixed-grid.sell.deviation.chart
    plots:
      Simulated distribution of WLTH sales:
       x:
            label: 'WLTH sold'
       y:
            label: 'Frequency (count)'
       marks:
          - type: recty
            options:
              transform:
                type: binx
                content:
                  outputs:
                    y: "count"
                  options:
                    x: "0.5"
                    thresholds: 25
                    
      Simulated distribution of USDC purchases:
       x:
            label: 'USDC bought'
       y:
            label: 'Frequency (count)'      
       marks:
          - type: recty
            options:
              transform:
                type: binx
                content:
                  outputs:
                    y: "count"
                  options:
                    x: "0.2"
                    thresholds: 25
    
deployments:
  base-wlth-buy:
    scenario: base-wlth-fixed-grid.buy.deviation.prod
    order: base-wlth-buy
  base-wlth-sell:
    scenario: base-wlth-fixed-grid.sell.deviation.prod
    order: base-wlth-sell
---
#cooldown-time !The minimum amount of seconds that must elapse between trades.
#bounty-amount !Amount of bounty offered.
#input-token !Input token from the perspective of order
#input-token-decimals !Input token decimals
#output-token !Output token from the perspective of order
#output-token-decimals !Output token decimals
#grid-min !Minimum trade ratio
#grid-max !Maximum trade ratio
#mean-input-usdc-amount !Mean amount in wlth received
#jittery-binomial-bits !Number of bits for jittery binomial

#twap-fee !Twap fee for the pool.
#twap-deviation !Percentage twap deviation.

#test-last-time !Test last time for plotting.

#ensure-cooldown !Binding to enforce cooldown check.
#ensure-grid-band !Binding to ensure price grid
#calculate-exact-quote !Binding to calculate exact quote.
#calculate-io-ratio !Binding to calculate io-ratio.
#twap-check !Binding to enforce oracle guard protection.
#plottables !The binding for additional things we want to plot during testing.

#uniswap-words !The subparser for the Uniswap words
#orderbook-subparser !The subparser for the Orderbook words
#cooldown-key "cooldown-key"

#twap-check-chart
  io-ratio: ,
  twap-30: uniswap-v3-twap-output-ratio(output-token output-token-decimals input-token input-token-decimals 1800 0 twap-fee),
  twap-ratio: decimal18-div(twap-30 io-ratio);

#twap-check-prod
  io-ratio: ,
  twap-30: uniswap-v3-twap-output-ratio(output-token output-token-decimals input-token input-token-decimals 1800 0 twap-fee),
  twap-ratio: decimal18-div(twap-30 io-ratio),
  :ensure(
    every(
      less-than(twap-ratio decimal18-add(1e18 twap-deviation)) greater-than(twap-ratio decimal18-saturating-sub(1e18 twap-deviation))
    )
    "twap check"
  );

#jittery-binomial
  seed:,
  binomial18-10:
    int-to-decimal18(bitwise-count-ones(bitwise-decode<0 jittery-binomial-bits>(hash(seed)))),
  noise18-1:
    int-mod(hash(seed 0) 1e18),
  jittery-combined:
    decimal18-add(binomial18-10 noise18-1),
  jittery-combined-normalized:
    decimal18-div(jittery-combined decimal18-add(1e18 int-to-decimal18(jittery-binomial-bits)));

#ensure-cooldown-chart
 _: test-last-time;
 
#ensure-cooldown-prod
 now: block-timestamp(),
 last-time: get(hash(order-hash() cooldown-key)),
 :ensure(
   greater-than-or-equal-to(
     now
     int-add(last-time cooldown-time)
   )
   "cooldown"
 ),
 :set(hash(order-hash() cooldown-key) now);

#ensure-grid-band-chart
  grid-min-price grid-max-price: ,
  current-price: uniswap-v3-twap-output-ratio(
    input-token input-token-decimals
    output-token output-token-decimals
    0 0
    twap-fee
  ),
  effective-current-price: decimal18-inv(current-price),
  effective-grid-min: decimal18-inv(grid-min-price),
  effective-grid-max: decimal18-inv(grid-max-price);


#ensure-grid-band-prod
  grid-min-price grid-max-price: ,
  current-price: uniswap-v3-twap-output-ratio(
    input-token input-token-decimals
    output-token output-token-decimals
    0 0
    twap-fee
  ),
  :ensure(
    every(
      greater-than-or-equal-to(current-price grid-min-price)
      less-than-or-equal-to(current-price grid-max-price)
    )
    "grid band"
  );

#calculate-io-ratio-buy
  usdc-amount18
  wlth-amount18: ,
  io-ratio: decimal18-div(wlth-amount18 decimal18-add(usdc-amount18 bounty-amount)),
  _ :call<'twap-check>(io-ratio),
  /* Add io-ratio and max-op on stack*/
  _: usdc-amount18,
  _: io-ratio;

#calculate-io-ratio-sell
  usdc-amount18
  wlth-amount18: ,
  io-ratio: decimal18-div(decimal18-saturating-sub(usdc-amount18 bounty-amount) wlth-amount18),
  _ :call<'twap-check>(decimal18-inv(io-ratio)),
  /* Add io-ratio and max-op on stack*/
  _: wlth-amount18,
  _: io-ratio;

#calculate-exact-buy-quote
  amount-usdc6: ,
  _: uniswap-v3-quote-exact-input(output-token input-token amount-usdc6 twap-fee);

#calculate-exact-sell-quote
  amount-usdc6: ,
  _: uniswap-v3-quote-exact-output(input-token output-token amount-usdc6 twap-fee);

#plottables-chart
  max-output-amount io-ratio twap-ratio: ,
  _: cooldown-time,
  _: mean-input-usdc-amount,
  _: bounty-amount,
  _: decimal18-mul(twap-deviation 100e18),
  current-twap-deviation: if(
    greater-than(1e18 twap-ratio)
    decimal18-mul(decimal18-saturating-sub(1e18 twap-ratio) 100e18)
    decimal18-mul(decimal18-saturating-sub(twap-ratio 1e18) 100e18)
  ),
  bounty-ratio: decimal18-mul(decimal18-div(bounty-amount mean-input-usdc-amount) 100e18),
  cooldown-in-minutes: int-to-decimal18(int-div(cooldown-time 60)),
  cooldown-in-hours: decimal18-div(60e18 cooldown-in-minutes);

#plottables-prod
  _ _ _: ;

#calculate-io
  using-words-from uniswap-words orderbook-subparser

  :call<'ensure-grid-band>(grid-min grid-max),
  last-time: call<'ensure-cooldown>(),
  random-multiplier18: call<'jittery-binomial>(last-time), 
  jittered-amount-usdc18: decimal18-mul(
    decimal18-mul(mean-input-usdc-amount 2e18)
    random-multiplier18
  ),
  jittered-amount-usdc6: decimal18-scale-n-dynamic(output-token-decimals jittered-amount-usdc18), 
  wlth-amount-output: call<'calculate-exact-quote>(jittered-amount-usdc6),
  wlth-amount18: decimal18-scale-18-dynamic(input-token-decimals wlth-amount-output),
  twap-ratio max-output final-io-ratio: call<'calculate-io-ratio>(jittered-amount-usdc18 wlth-amount18),
  :call<'plottables>(max-output final-io-ratio twap-ratio);


#handle-io
:;
